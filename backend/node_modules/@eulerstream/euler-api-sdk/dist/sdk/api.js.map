{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/sdk/api.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * The Sign Server™\n * Sign Server API Documentation\n *\n * The version of the OpenAPI document: dev\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const ApiRoutes = {\n    ApiLive: 'api-live',\n    InfoByUser: 'info-by-user'\n} as const;\n\nexport type ApiRoutes = typeof ApiRoutes[keyof typeof ApiRoutes];\n\n\n/**\n * \n * @export\n * @interface IAccountRequestLimits\n */\nexport interface IAccountRequestLimits {\n    /**\n     * \n     * @type {number}\n     * @memberof IAccountRequestLimits\n     */\n    'day': number;\n    /**\n     * \n     * @type {number}\n     * @memberof IAccountRequestLimits\n     */\n    'minute': number;\n    /**\n     * \n     * @type {number}\n     * @memberof IAccountRequestLimits\n     */\n    'hour': number;\n}\n/**\n * \n * @export\n * @interface IAlert\n */\nexport interface IAlert {\n    /**\n     * \n     * @type {string}\n     * @memberof IAlert\n     */\n    'unique_id': string;\n    /**\n     * \n     * @type {number}\n     * @memberof IAlert\n     */\n    'account_id': number;\n    /**\n     * \n     * @type {number}\n     * @memberof IAlert\n     */\n    'alert_creator_id': number;\n    /**\n     * \n     * @type {number}\n     * @memberof IAlert\n     */\n    'id': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IAlert\n     */\n    'created_at': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IAlert\n     */\n    'alert_creator_username': string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof IAlert\n     */\n    'read_only': boolean;\n}\n/**\n * \n * @export\n * @interface IAlertConfigBase\n */\nexport interface IAlertConfigBase {\n    /**\n     * \n     * @type {string}\n     * @memberof IAlertConfigBase\n     */\n    'unique_id': string;\n}\n/**\n * \n * @export\n * @interface IAlertTarget\n */\nexport interface IAlertTarget {\n    /**\n     * \n     * @type {string}\n     * @memberof IAlertTarget\n     */\n    'url': string;\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: any; }}\n     * @memberof IAlertTarget\n     */\n    'metadata'?: { [key: string]: any; };\n    /**\n     * \n     * @type {number}\n     * @memberof IAlertTarget\n     */\n    'alert_id': number;\n    /**\n     * \n     * @type {number}\n     * @memberof IAlertTarget\n     */\n    'alert_creator_id': number;\n    /**\n     * \n     * @type {number}\n     * @memberof IAlertTarget\n     */\n    'id': number;\n    /**\n     * \n     * @type {IAlertTargetStatus}\n     * @memberof IAlertTarget\n     */\n    'last_status': IAlertTargetStatus;\n    /**\n     * \n     * @type {string}\n     * @memberof IAlertTarget\n     */\n    'created_at': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IAlertTarget\n     */\n    'updated_at': string;\n    /**\n     * \n     * @type {IAlertTargetFormat}\n     * @memberof IAlertTarget\n     */\n    'format': IAlertTargetFormat;\n    /**\n     * \n     * @type {number}\n     * @memberof IAlertTarget\n     */\n    'account_id': number;\n}\n\n\n/**\n * \n * @export\n * @interface IAlertTargetConfigBase\n */\nexport interface IAlertTargetConfigBase {\n    /**\n     * \n     * @type {string}\n     * @memberof IAlertTargetConfigBase\n     */\n    'url': string;\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: any; }}\n     * @memberof IAlertTargetConfigBase\n     */\n    'metadata'?: { [key: string]: any; };\n}\n/**\n * \n * @export\n * @enum {number}\n */\n\nexport const IAlertTargetFormat = {\n    NUMBER_0: 0,\n    NUMBER_1: 1\n} as const;\n\nexport type IAlertTargetFormat = typeof IAlertTargetFormat[keyof typeof IAlertTargetFormat];\n\n\n/**\n * \n * @export\n * @enum {number}\n */\n\nexport const IAlertTargetStatus = {\n    NUMBER_0: 0,\n    NUMBER_1: 1,\n    NUMBER_4: 4\n} as const;\n\nexport type IAlertTargetStatus = typeof IAlertTargetStatus[keyof typeof IAlertTargetStatus];\n\n\n/**\n * \n * @export\n * @interface IAlertWithRoomInfo\n */\nexport interface IAlertWithRoomInfo {\n    /**\n     * \n     * @type {string}\n     * @memberof IAlertWithRoomInfo\n     */\n    'unique_id': string;\n    /**\n     * \n     * @type {number}\n     * @memberof IAlertWithRoomInfo\n     */\n    'account_id': number;\n    /**\n     * \n     * @type {number}\n     * @memberof IAlertWithRoomInfo\n     */\n    'alert_creator_id': number;\n    /**\n     * \n     * @type {number}\n     * @memberof IAlertWithRoomInfo\n     */\n    'id': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IAlertWithRoomInfo\n     */\n    'created_at': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IAlertWithRoomInfo\n     */\n    'alert_creator_username': string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof IAlertWithRoomInfo\n     */\n    'read_only': boolean;\n    /**\n     * \n     * @type {TikTokLiveRoomInfo}\n     * @memberof IAlertWithRoomInfo\n     */\n    'room_info'?: TikTokLiveRoomInfo;\n}\n/**\n * \n * @export\n * @interface IApiKey\n */\nexport interface IApiKey {\n    /**\n     * \n     * @type {string}\n     * @memberof IApiKey\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IApiKey\n     */\n    'value': string;\n    /**\n     * \n     * @type {number}\n     * @memberof IApiKey\n     */\n    'id': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IApiKey\n     */\n    'created_at': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IApiKey\n     */\n    'updated_at': string;\n    /**\n     * \n     * @type {number}\n     * @memberof IApiKey\n     */\n    'account_id': number;\n}\n/**\n * \n * @export\n * @interface IApiKeyConfig\n */\nexport interface IApiKeyConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof IApiKeyConfig\n     */\n    'name': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IApiKeyConfig\n     */\n    'value': string;\n}\n/**\n * \n * @export\n * @interface IApiKeyConfigBase\n */\nexport interface IApiKeyConfigBase {\n    /**\n     * \n     * @type {string}\n     * @memberof IApiKeyConfigBase\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface ICountSignUsage\n */\nexport interface ICountSignUsage {\n    /**\n     * \n     * @type {number}\n     * @memberof ICountSignUsage\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ICountSignUsage\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ICountSignUsage\n     */\n    'pages'?: number;\n}\n/**\n * \n * @export\n * @interface ICreateAlertResponse\n */\nexport interface ICreateAlertResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof ICreateAlertResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ICreateAlertResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {IAlert}\n     * @memberof ICreateAlertResponse\n     */\n    'alert'?: IAlert;\n}\n/**\n * \n * @export\n * @interface ICreateAlertTargetResponse\n */\nexport interface ICreateAlertTargetResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof ICreateAlertTargetResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ICreateAlertTargetResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {IAlertTarget}\n     * @memberof ICreateAlertTargetResponse\n     */\n    'target'?: IAlertTarget;\n}\n/**\n * \n * @export\n * @interface ICreateJWTResponse\n */\nexport interface ICreateJWTResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof ICreateJWTResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ICreateJWTResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ICreateJWTResponse\n     */\n    'token'?: string;\n    /**\n     * \n     * @type {JWTConfig}\n     * @memberof ICreateJWTResponse\n     */\n    'config'?: JWTConfig;\n}\n/**\n * \n * @export\n * @interface ICreateKeyResponse\n */\nexport interface ICreateKeyResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof ICreateKeyResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ICreateKeyResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {IApiKey}\n     * @memberof ICreateKeyResponse\n     */\n    'key'?: IApiKey;\n}\n/**\n * \n * @export\n * @interface IDeleteAlertResponse\n */\nexport interface IDeleteAlertResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IDeleteAlertResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IDeleteAlertResponse\n     */\n    'message'?: string;\n}\n/**\n * \n * @export\n * @interface IDeleteAlertTargetResponse\n */\nexport interface IDeleteAlertTargetResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IDeleteAlertTargetResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IDeleteAlertTargetResponse\n     */\n    'message'?: string;\n}\n/**\n * \n * @export\n * @interface IDeleteKeyResponse\n */\nexport interface IDeleteKeyResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IDeleteKeyResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IDeleteKeyResponse\n     */\n    'message'?: string;\n}\n/**\n * \n * @export\n * @interface IGetRateLimits\n */\nexport interface IGetRateLimits {\n    /**\n     * \n     * @type {number}\n     * @memberof IGetRateLimits\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IGetRateLimits\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {IRateLimitInfo}\n     * @memberof IGetRateLimits\n     */\n    'day'?: IRateLimitInfo;\n    /**\n     * \n     * @type {IRateLimitInfo}\n     * @memberof IGetRateLimits\n     */\n    'hour'?: IRateLimitInfo;\n    /**\n     * \n     * @type {IRateLimitInfo}\n     * @memberof IGetRateLimits\n     */\n    'minute'?: IRateLimitInfo;\n}\n/**\n * \n * @export\n * @interface IGetSignUsageResponse\n */\nexport interface IGetSignUsageResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IGetSignUsageResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IGetSignUsageResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Array<ISignLogPublic>}\n     * @memberof IGetSignUsageResponse\n     */\n    'usage'?: Array<ISignLogPublic>;\n}\n/**\n * \n * @export\n * @interface IGetSignWebcastUrlResponse\n */\nexport interface IGetSignWebcastUrlResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IGetSignWebcastUrlResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IGetSignWebcastUrlResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof IGetSignWebcastUrlResponse\n     */\n    'signedUrl'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof IGetSignWebcastUrlResponse\n     */\n    'msToken'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof IGetSignWebcastUrlResponse\n     */\n    'browserVersion'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof IGetSignWebcastUrlResponse\n     */\n    'browserName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof IGetSignWebcastUrlResponse\n     */\n    '_signature'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof IGetSignWebcastUrlResponse\n     */\n    'X-Bogus'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof IGetSignWebcastUrlResponse\n     */\n    'User-Agent'?: string;\n}\n/**\n * \n * @export\n * @interface IHostsResponse\n */\nexport interface IHostsResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IHostsResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IHostsResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Array<PeerPresence>}\n     * @memberof IHostsResponse\n     */\n    'hosts'?: Array<PeerPresence>;\n}\n/**\n * \n * @export\n * @interface IJSONResponse\n */\nexport interface IJSONResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IJSONResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IJSONResponse\n     */\n    'message'?: string;\n}\n/**\n * \n * @export\n * @interface IListAlertTargetsResponse\n */\nexport interface IListAlertTargetsResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IListAlertTargetsResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IListAlertTargetsResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Array<IAlertTarget>}\n     * @memberof IListAlertTargetsResponse\n     */\n    'targets'?: Array<IAlertTarget>;\n}\n/**\n * \n * @export\n * @interface IListAlertsResponse\n */\nexport interface IListAlertsResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IListAlertsResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IListAlertsResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Array<IAlertWithRoomInfo>}\n     * @memberof IListAlertsResponse\n     */\n    'alerts'?: Array<IAlertWithRoomInfo>;\n}\n/**\n * \n * @export\n * @interface IListKeysResponse\n */\nexport interface IListKeysResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IListKeysResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IListKeysResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Array<IApiKey>}\n     * @memberof IListKeysResponse\n     */\n    'keys'?: Array<IApiKey>;\n}\n/**\n * \n * @export\n * @interface IPipResponse\n */\nexport interface IPipResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IPipResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IPipResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof IPipResponse\n     */\n    'image_url': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IPipResponse\n     */\n    'label': string;\n    /**\n     * \n     * @type {number}\n     * @memberof IPipResponse\n     */\n    'value': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IPipResponse\n     */\n    'unit': string;\n}\n/**\n * \n * @export\n * @interface IRateLimitInfo\n */\nexport interface IRateLimitInfo {\n    /**\n     * \n     * @type {number}\n     * @memberof IRateLimitInfo\n     */\n    'max': number;\n    /**\n     * \n     * @type {number}\n     * @memberof IRateLimitInfo\n     */\n    'remaining': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IRateLimitInfo\n     */\n    'reset_at': string | null;\n}\n/**\n * \n * @export\n * @interface IRetrieveAgentHostsResponse\n */\nexport interface IRetrieveAgentHostsResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IRetrieveAgentHostsResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IRetrieveAgentHostsResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {Array<PeerPresence>}\n     * @memberof IRetrieveAgentHostsResponse\n     */\n    'agents': Array<PeerPresence>;\n}\n/**\n * \n * @export\n * @interface IRetrieveAggregateUsageResponse\n */\nexport interface IRetrieveAggregateUsageResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IRetrieveAggregateUsageResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IRetrieveAggregateUsageResponse\n     */\n    'message'?: string;\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: { [key: string]: any; }; }}\n     * @memberof IRetrieveAggregateUsageResponse\n     */\n    'usage'?: { [key: string]: { [key: string]: any; }; };\n}\n/**\n * \n * @export\n * @interface IRetrieveAlertResponse\n */\nexport interface IRetrieveAlertResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IRetrieveAlertResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IRetrieveAlertResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {IAlert}\n     * @memberof IRetrieveAlertResponse\n     */\n    'alert'?: IAlert;\n    /**\n     * \n     * @type {IRetrieveAlertResponseCreator}\n     * @memberof IRetrieveAlertResponse\n     */\n    'creator'?: IRetrieveAlertResponseCreator;\n    /**\n     * \n     * @type {TikTokLiveRoomInfo}\n     * @memberof IRetrieveAlertResponse\n     */\n    'room_info'?: TikTokLiveRoomInfo;\n}\n/**\n * \n * @export\n * @interface IRetrieveAlertResponseCreator\n */\nexport interface IRetrieveAlertResponseCreator {\n    /**\n     * \n     * @type {string}\n     * @memberof IRetrieveAlertResponseCreator\n     */\n    'room_id': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof IRetrieveAlertResponseCreator\n     */\n    'state_label': string;\n    /**\n     * \n     * @type {number}\n     * @memberof IRetrieveAlertResponseCreator\n     */\n    'state': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IRetrieveAlertResponseCreator\n     */\n    'unique_id': string;\n}\n/**\n * \n * @export\n * @interface IRetrieveKeyResponse\n */\nexport interface IRetrieveKeyResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IRetrieveKeyResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IRetrieveKeyResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {IApiKey}\n     * @memberof IRetrieveKeyResponse\n     */\n    'key'?: IApiKey;\n}\n/**\n * \n * @export\n * @interface IRetrievedCloudWebSocketsRouteResponse\n */\nexport interface IRetrievedCloudWebSocketsRouteResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IRetrievedCloudWebSocketsRouteResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IRetrievedCloudWebSocketsRouteResponse\n     */\n    'message'?: string;\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: WebSocketState; }}\n     * @memberof IRetrievedCloudWebSocketsRouteResponse\n     */\n    'state'?: { [key: string]: WebSocketState; };\n    /**\n     * \n     * @type {number}\n     * @memberof IRetrievedCloudWebSocketsRouteResponse\n     */\n    'connections'?: number;\n}\n/**\n * \n * @export\n * @interface ISignLogPublic\n */\nexport interface ISignLogPublic {\n    /**\n     * \n     * @type {number}\n     * @memberof ISignLogPublic\n     */\n    'id': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ISignLogPublic\n     */\n    'ts': string;\n    /**\n     * \n     * @type {number}\n     * @memberof ISignLogPublic\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ISignLogPublic\n     */\n    'client': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ISignLogPublic\n     */\n    'ip': string;\n    /**\n     * \n     * @type {number}\n     * @memberof ISignLogPublic\n     */\n    'api_key_id': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ISignLogPublic\n     */\n    'user_agent': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ISignLogPublic\n     */\n    'agent_id': string;\n}\n/**\n * \n * @export\n * @interface ISignTikTokUrlBody\n */\nexport interface ISignTikTokUrlBody {\n    /**\n     * \n     * @type {string}\n     * @memberof ISignTikTokUrlBody\n     */\n    'url': string;\n    /**\n     * \n     * @type {string}\n     * @memberof ISignTikTokUrlBody\n     */\n    'userAgent'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ISignTikTokUrlBody\n     */\n    'method'?: ISignTikTokUrlBodyMethodEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ISignTikTokUrlBody\n     */\n    'sessionId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ISignTikTokUrlBody\n     */\n    'ttTargetIdc'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ISignTikTokUrlBody\n     */\n    'payload'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ISignTikTokUrlBody\n     */\n    'type'?: ISignTikTokUrlBodyTypeEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ISignTikTokUrlBody\n     */\n    'includeBrowserParams'?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ISignTikTokUrlBody\n     */\n    'includeVerifyFp'?: boolean;\n}\n\nexport const ISignTikTokUrlBodyMethodEnum = {\n    Get: 'GET',\n    Post: 'POST',\n    Options: 'OPTIONS',\n    Put: 'PUT',\n    Delete: 'DELETE',\n    Patch: 'PATCH',\n    Head: 'HEAD'\n} as const;\n\nexport type ISignTikTokUrlBodyMethodEnum = typeof ISignTikTokUrlBodyMethodEnum[keyof typeof ISignTikTokUrlBodyMethodEnum];\nexport const ISignTikTokUrlBodyTypeEnum = {\n    Fetch: 'fetch',\n    Xhr: 'xhr'\n} as const;\n\nexport type ISignTikTokUrlBodyTypeEnum = typeof ISignTikTokUrlBodyTypeEnum[keyof typeof ISignTikTokUrlBodyTypeEnum];\n\n/**\n * \n * @export\n * @interface ISignTikTokUrlResponse\n */\nexport interface ISignTikTokUrlResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof ISignTikTokUrlResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ISignTikTokUrlResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringAnyArray}\n     * @memberof ISignTikTokUrlResponse\n     */\n    'response'?: PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringAnyArray;\n}\n/**\n * \n * @export\n * @interface ITestAlertTargetResponse\n */\nexport interface ITestAlertTargetResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof ITestAlertTargetResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof ITestAlertTargetResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {IAlertTargetStatus}\n     * @memberof ITestAlertTargetResponse\n     */\n    'status'?: IAlertTargetStatus;\n    /**\n     * \n     * @type {string}\n     * @memberof ITestAlertTargetResponse\n     */\n    'statusLabel'?: string;\n}\n\n\n/**\n * \n * @export\n * @interface IUpdateKeyResponse\n */\nexport interface IUpdateKeyResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IUpdateKeyResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IUpdateKeyResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {IApiKeyConfig}\n     * @memberof IUpdateKeyResponse\n     */\n    'config'?: IApiKeyConfig;\n}\n/**\n * \n * @export\n * @interface IWebcastRoomChatPayload\n */\nexport interface IWebcastRoomChatPayload {\n    /**\n     * \n     * @type {string}\n     * @memberof IWebcastRoomChatPayload\n     */\n    'content': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IWebcastRoomChatPayload\n     */\n    'sessionId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IWebcastRoomChatPayload\n     */\n    'ttTargetIdc': string;\n    /**\n     * \n     * @type {string}\n     * @memberof IWebcastRoomChatPayload\n     */\n    'roomId': string;\n}\n/**\n * \n * @export\n * @interface IWebcastRoomChatRouteResponse\n */\nexport interface IWebcastRoomChatRouteResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IWebcastRoomChatRouteResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IWebcastRoomChatRouteResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {any}\n     * @memberof IWebcastRoomChatRouteResponse\n     */\n    'data'?: any;\n}\n/**\n * \n * @export\n * @interface IWebcastRoomIdRouteResponse\n */\nexport interface IWebcastRoomIdRouteResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IWebcastRoomIdRouteResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IWebcastRoomIdRouteResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof IWebcastRoomIdRouteResponse\n     */\n    'room_id'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof IWebcastRoomIdRouteResponse\n     */\n    'is_live'?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof IWebcastRoomIdRouteResponse\n     */\n    'ok': boolean;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof IWebcastRoomIdRouteResponse\n     */\n    'routes_attempted': Array<string>;\n}\n/**\n * \n * @export\n * @interface IWebcastRoomInfoRouteResponse\n */\nexport interface IWebcastRoomInfoRouteResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof IWebcastRoomInfoRouteResponse\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof IWebcastRoomInfoRouteResponse\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {TikTokLiveRoomInfo}\n     * @memberof IWebcastRoomInfoRouteResponse\n     */\n    'data'?: TikTokLiveRoomInfo;\n    /**\n     * \n     * @type {boolean}\n     * @memberof IWebcastRoomInfoRouteResponse\n     */\n    'ok': boolean;\n    /**\n     * \n     * @type {Array<ApiRoutes>}\n     * @memberof IWebcastRoomInfoRouteResponse\n     */\n    'routes_attempted': Array<ApiRoutes>;\n}\n/**\n * \n * @export\n * @interface JWTConfig\n */\nexport interface JWTConfig {\n    /**\n     * \n     * @type {string}\n     * @memberof JWTConfig\n     */\n    'id': string;\n    /**\n     * \n     * @type {number}\n     * @memberof JWTConfig\n     */\n    'expiresAt': number;\n    /**\n     * \n     * @type {number}\n     * @memberof JWTConfig\n     */\n    'ttl': number;\n    /**\n     * \n     * @type {JWTConfigAccountData}\n     * @memberof JWTConfig\n     */\n    'accountData': JWTConfigAccountData;\n    /**\n     * \n     * @type {JWTConfigApiKeyData}\n     * @memberof JWTConfig\n     */\n    'apiKeyData': JWTConfigApiKeyData;\n    /**\n     * \n     * @type {WebSocketJWTLimits}\n     * @memberof JWTConfig\n     */\n    'webSocketData': WebSocketJWTLimits;\n    /**\n     * \n     * @type {string}\n     * @memberof JWTConfig\n     */\n    'name': string | null;\n}\n/**\n * \n * @export\n * @interface JWTConfigAccountData\n */\nexport interface JWTConfigAccountData {\n    /**\n     * \n     * @type {number}\n     * @memberof JWTConfigAccountData\n     */\n    'day': number;\n    /**\n     * \n     * @type {number}\n     * @memberof JWTConfigAccountData\n     */\n    'minute': number;\n    /**\n     * \n     * @type {number}\n     * @memberof JWTConfigAccountData\n     */\n    'hour': number;\n    /**\n     * \n     * @type {number}\n     * @memberof JWTConfigAccountData\n     */\n    'id': number;\n}\n/**\n * \n * @export\n * @interface JWTConfigApiKeyData\n */\nexport interface JWTConfigApiKeyData {\n    /**\n     * \n     * @type {number}\n     * @memberof JWTConfigApiKeyData\n     */\n    'id': number;\n}\n/**\n * \n * @export\n * @interface JWTCreateConfig\n */\nexport interface JWTCreateConfig {\n    /**\n     * \n     * @type {IAccountRequestLimits}\n     * @memberof JWTCreateConfig\n     */\n    'limits'?: IAccountRequestLimits | null;\n    /**\n     * \n     * @type {WebSocketJWTLimits}\n     * @memberof JWTCreateConfig\n     */\n    'websockets'?: WebSocketJWTLimits | null;\n    /**\n     * \n     * @type {number}\n     * @memberof JWTCreateConfig\n     */\n    'expireAfter': number;\n    /**\n     * \n     * @type {string}\n     * @memberof JWTCreateConfig\n     */\n    'name'?: string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const LiveClient = {\n    TtliveJava: 'ttlive-java',\n    TtliveNode: 'ttlive-node',\n    TtlivePython: 'ttlive-python',\n    TtliveNet: 'ttlive-net',\n    TtliveRust: 'ttlive-rust',\n    GotiktokLive: 'gotiktok_live',\n    TtliveCloudflare: 'ttlive-cloudflare',\n    TtliveOther: 'ttlive-other'\n} as const;\n\nexport type LiveClient = typeof LiveClient[keyof typeof LiveClient];\n\n\n/**\n * \n * @export\n * @enum {number}\n */\n\nexport const LogRequestMethod = {\n    NUMBER_0: 0,\n    NUMBER_1: 1\n} as const;\n\nexport type LogRequestMethod = typeof LogRequestMethod[keyof typeof LogRequestMethod];\n\n\n/**\n * Make all properties in T optional\n * @export\n * @interface PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n */\nexport interface PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber {\n    /**\n     * \n     * @type {string}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'avatar_url'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'nickname'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'sec_uid'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'numeric_uid'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'signature'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'is_verified'?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'following'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PartialAvatarUrlStringNicknameStringSecUidStringNumericUidStringSignatureStringIsVerifiedBooleanFollowingNumberFollowersNumber\n     */\n    'followers'?: number;\n}\n/**\n * Make all properties in T optional\n * @export\n * @interface PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringAnyArray\n */\nexport interface PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringAnyArray {\n    /**\n     * \n     * @type {string}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringAnyArray\n     */\n    'signedUrl'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringAnyArray\n     */\n    'userAgent'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringAnyArray\n     */\n    'browserName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringAnyArray\n     */\n    'browserVersion'?: string;\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: string; }}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringAnyArray\n     */\n    'tokens'?: { [key: string]: string; };\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: string; }}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringAnyArray\n     */\n    'requestHeaders'?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<{ [key: string]: any; }>}\n     * @memberof PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringAnyArray\n     */\n    'cookies'?: Array<{ [key: string]: any; }>;\n}\n/**\n * Make all properties in T optional\n * @export\n * @interface PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString\n */\nexport interface PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString {\n    /**\n     * \n     * @type {number}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString\n     */\n    'status'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString\n     */\n    'is_live'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString\n     */\n    'id'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString\n     */\n    'cover_url'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString\n     */\n    'title'?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString\n     */\n    'start_time'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString\n     */\n    'current_viewers'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString\n     */\n    'total_viewers'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString\n     */\n    'hls_pull_url'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString\n     */\n    'hls_pull_url_ld'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString\n     */\n    'flv_pull_url'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString\n     */\n    'flv_pull_url_ld'?: string;\n}\n/**\n * \n * @export\n * @interface PeerPresence\n */\nexport interface PeerPresence {\n    /**\n     * \n     * @type {number}\n     * @memberof PeerPresence\n     */\n    'lastSeen': number;\n    /**\n     * \n     * @type {PeerRole}\n     * @memberof PeerPresence\n     */\n    'role': PeerRole;\n    /**\n     * \n     * @type {string}\n     * @memberof PeerPresence\n     */\n    'id': string;\n    /**\n     * \n     * @type {string}\n     * @memberof PeerPresence\n     */\n    'type': PeerPresenceTypeEnum;\n}\n\nexport const PeerPresenceTypeEnum = {\n    Api: 'api',\n    Agent: 'agent'\n} as const;\n\nexport type PeerPresenceTypeEnum = typeof PeerPresenceTypeEnum[keyof typeof PeerPresenceTypeEnum];\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const PeerRole = {\n    Public: 'public',\n    Enterprise: 'enterprise',\n    Staging: 'staging'\n} as const;\n\nexport type PeerRole = typeof PeerRole[keyof typeof PeerRole];\n\n\n/**\n * \n * @export\n * @interface Pips200Response\n */\nexport interface Pips200Response {\n    /**\n     * \n     * @type {number}\n     * @memberof Pips200Response\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof Pips200Response\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Pips200Response\n     */\n    'image_url': string;\n    /**\n     * \n     * @type {string}\n     * @memberof Pips200Response\n     */\n    'label': string;\n    /**\n     * \n     * @type {number}\n     * @memberof Pips200Response\n     */\n    'value': number;\n    /**\n     * \n     * @type {string}\n     * @memberof Pips200Response\n     */\n    'unit': string;\n}\n/**\n * \n * @export\n * @interface SignWebcastUrl200Response\n */\nexport interface SignWebcastUrl200Response {\n    /**\n     * \n     * @type {number}\n     * @memberof SignWebcastUrl200Response\n     */\n    'code': number;\n    /**\n     * \n     * @type {string}\n     * @memberof SignWebcastUrl200Response\n     */\n    'message'?: string;\n    /**\n     * \n     * @type {PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringAnyArray}\n     * @memberof SignWebcastUrl200Response\n     */\n    'response'?: PartialSignedUrlStringUserAgentStringBrowserNameStringBrowserVersionStringTokensRecordStringStringRequestHeadersRecordStringStringCookiesRecordStringAnyArray;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const StreamType = {\n    HlsLd: 'hls_ld',\n    HlsSd: 'hls_sd',\n    FlvLd: 'flv_ld',\n    FlvSd: 'flv_sd'\n} as const;\n\nexport type StreamType = typeof StreamType[keyof typeof StreamType];\n\n\n/**\n * \n * @export\n * @interface TikTokLiveRoomInfo\n */\nexport interface TikTokLiveRoomInfo {\n    /**\n     * Construct a type with a set of properties K of type T\n     * @type {{ [key: string]: any; }}\n     * @memberof TikTokLiveRoomInfo\n     */\n    'raw': { [key: string]: any; };\n    /**\n     * \n     * @type {PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString}\n     * @memberof TikTokLiveRoomInfo\n     */\n    'room_info'?: PartialStatusNumberIsLiveBooleanIdStringCoverUrlStringTitleStringStartTimeNumberCurrentViewersNumberTotalViewersNumberHlsPullUrlStringHlsPullUrlLdStringFlvPullUrlStringFlvPullUrlLdString;\n    /**\n     * \n     * @type {TikTokLiveRoomInfoUser}\n     * @memberof TikTokLiveRoomInfo\n     */\n    'user'?: TikTokLiveRoomInfoUser;\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveRoomInfo\n     */\n    'unique_id': string;\n}\n/**\n * \n * @export\n * @interface TikTokLiveRoomInfoUser\n */\nexport interface TikTokLiveRoomInfoUser {\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveRoomInfoUser\n     */\n    'avatar_url'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveRoomInfoUser\n     */\n    'nickname'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveRoomInfoUser\n     */\n    'sec_uid'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveRoomInfoUser\n     */\n    'numeric_uid'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveRoomInfoUser\n     */\n    'signature'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof TikTokLiveRoomInfoUser\n     */\n    'is_verified'?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof TikTokLiveRoomInfoUser\n     */\n    'following'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof TikTokLiveRoomInfoUser\n     */\n    'followers'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof TikTokLiveRoomInfoUser\n     */\n    'unique_id': string;\n}\n/**\n * \n * @export\n * @interface WebSocketJWTLimits\n */\nexport interface WebSocketJWTLimits {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof WebSocketJWTLimits\n     */\n    'allowedCreators': Array<string> | null;\n    /**\n     * \n     * @type {number}\n     * @memberof WebSocketJWTLimits\n     */\n    'maxWebSockets': number;\n}\n/**\n * \n * @export\n * @interface WebSocketState\n */\nexport interface WebSocketState {\n    /**\n     * \n     * @type {number}\n     * @memberof WebSocketState\n     */\n    'apiKeyId': number;\n    /**\n     * \n     * @type {string}\n     * @memberof WebSocketState\n     */\n    'jwtName': string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof WebSocketState\n     */\n    'jwtId': string | null;\n    /**\n     * \n     * @type {number}\n     * @memberof WebSocketState\n     */\n    'heartbeat': number;\n    /**\n     * \n     * @type {string}\n     * @memberof WebSocketState\n     */\n    'wsId': string;\n}\n\n/**\n * AccountsApi - axios parameter creator\n * @export\n */\nexport const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {string} from Start date for the logs\n         * @param {string} to End date for the logs\n         * @param {number} [apiKeyId] Optional API key ID to filter logs by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countSignUsage: async (accountId: number, from: string, to: string, apiKeyId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('countSignUsage', 'accountId', accountId)\n            // verify required parameter 'from' is not null or undefined\n            assertParamExists('countSignUsage', 'from', from)\n            // verify required parameter 'to' is not null or undefined\n            assertParamExists('countSignUsage', 'to', to)\n            const localVarPath = `/accounts/{account_id}/usage/sign_usage/page_count`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (from !== undefined) {\n                localVarQueryParameter['from'] = (from as any instanceof Date) ?\n                    (from as any).toISOString() :\n                    from;\n            }\n\n            if (to !== undefined) {\n                localVarQueryParameter['to'] = (to as any instanceof Date) ?\n                    (to as any).toISOString() :\n                    to;\n            }\n\n            if (apiKeyId !== undefined) {\n                localVarQueryParameter['api_key_id'] = apiKeyId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {string} from Start date for the logs\n         * @param {string} to End date for the logs\n         * @param {number} [apiKeyId] Optional API key ID to filter logs by\n         * @param {number} [page] Page number to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSignUsage: async (accountId: number, from: string, to: string, apiKeyId?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('getSignUsage', 'accountId', accountId)\n            // verify required parameter 'from' is not null or undefined\n            assertParamExists('getSignUsage', 'from', from)\n            // verify required parameter 'to' is not null or undefined\n            assertParamExists('getSignUsage', 'to', to)\n            const localVarPath = `/accounts/{account_id}/usage/sign_usage`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (from !== undefined) {\n                localVarQueryParameter['from'] = (from as any instanceof Date) ?\n                    (from as any).toISOString() :\n                    from;\n            }\n\n            if (to !== undefined) {\n                localVarQueryParameter['to'] = (to as any instanceof Date) ?\n                    (to as any).toISOString() :\n                    to;\n            }\n\n            if (apiKeyId !== undefined) {\n                localVarQueryParameter['api_key_id'] = apiKeyId;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {RetrieveAggregateUsagePeriodEnum} period The period for aggregate statistics to check\n         * @param {number} value The value for the period (either hours or numbers)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveAggregateUsage: async (accountId: number, period: RetrieveAggregateUsagePeriodEnum, value: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('retrieveAggregateUsage', 'accountId', accountId)\n            // verify required parameter 'period' is not null or undefined\n            assertParamExists('retrieveAggregateUsage', 'period', period)\n            // verify required parameter 'value' is not null or undefined\n            assertParamExists('retrieveAggregateUsage', 'value', value)\n            const localVarPath = `/accounts/{account_id}/usage/sign_usage/aggregate`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (period !== undefined) {\n                localVarQueryParameter['period'] = period;\n            }\n\n            if (value !== undefined) {\n                localVarQueryParameter['value'] = value;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AccountsApi - functional programming interface\n * @export\n */\nexport const AccountsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {string} from Start date for the logs\n         * @param {string} to End date for the logs\n         * @param {number} [apiKeyId] Optional API key ID to filter logs by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async countSignUsage(accountId: number, from: string, to: string, apiKeyId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICountSignUsage>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.countSignUsage(accountId, from, to, apiKeyId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AccountsApi.countSignUsage']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {string} from Start date for the logs\n         * @param {string} to End date for the logs\n         * @param {number} [apiKeyId] Optional API key ID to filter logs by\n         * @param {number} [page] Page number to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSignUsage(accountId: number, from: string, to: string, apiKeyId?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IGetSignUsageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSignUsage(accountId, from, to, apiKeyId, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AccountsApi.getSignUsage']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {RetrieveAggregateUsagePeriodEnum} period The period for aggregate statistics to check\n         * @param {number} value The value for the period (either hours or numbers)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveAggregateUsage(accountId: number, period: RetrieveAggregateUsagePeriodEnum, value: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRetrieveAggregateUsageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAggregateUsage(accountId, period, value, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AccountsApi.retrieveAggregateUsage']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * AccountsApi - factory interface\n * @export\n */\nexport const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AccountsApiFp(configuration)\n    return {\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {string} from Start date for the logs\n         * @param {string} to End date for the logs\n         * @param {number} [apiKeyId] Optional API key ID to filter logs by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        countSignUsage(accountId: number, from: string, to: string, apiKeyId?: number, options?: RawAxiosRequestConfig): AxiosPromise<ICountSignUsage> {\n            return localVarFp.countSignUsage(accountId, from, to, apiKeyId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {string} from Start date for the logs\n         * @param {string} to End date for the logs\n         * @param {number} [apiKeyId] Optional API key ID to filter logs by\n         * @param {number} [page] Page number to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSignUsage(accountId: number, from: string, to: string, apiKeyId?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<IGetSignUsageResponse> {\n            return localVarFp.getSignUsage(accountId, from, to, apiKeyId, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve the usage logs for a specific account\n         * @param {number} accountId Account ID to retrieve usage logs for\n         * @param {RetrieveAggregateUsagePeriodEnum} period The period for aggregate statistics to check\n         * @param {number} value The value for the period (either hours or numbers)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveAggregateUsage(accountId: number, period: RetrieveAggregateUsagePeriodEnum, value: number, options?: RawAxiosRequestConfig): AxiosPromise<IRetrieveAggregateUsageResponse> {\n            return localVarFp.retrieveAggregateUsage(accountId, period, value, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AccountsApi - object-oriented interface\n * @export\n * @class AccountsApi\n * @extends {BaseAPI}\n */\nexport class AccountsApi extends BaseAPI {\n    /**\n     * Retrieve the usage logs for a specific account\n     * @param {number} accountId Account ID to retrieve usage logs for\n     * @param {string} from Start date for the logs\n     * @param {string} to End date for the logs\n     * @param {number} [apiKeyId] Optional API key ID to filter logs by\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountsApi\n     */\n    public countSignUsage(accountId: number, from: string, to: string, apiKeyId?: number, options?: RawAxiosRequestConfig) {\n        return AccountsApiFp(this.configuration).countSignUsage(accountId, from, to, apiKeyId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve the usage logs for a specific account\n     * @param {number} accountId Account ID to retrieve usage logs for\n     * @param {string} from Start date for the logs\n     * @param {string} to End date for the logs\n     * @param {number} [apiKeyId] Optional API key ID to filter logs by\n     * @param {number} [page] Page number to retrieve\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountsApi\n     */\n    public getSignUsage(accountId: number, from: string, to: string, apiKeyId?: number, page?: number, options?: RawAxiosRequestConfig) {\n        return AccountsApiFp(this.configuration).getSignUsage(accountId, from, to, apiKeyId, page, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve the usage logs for a specific account\n     * @param {number} accountId Account ID to retrieve usage logs for\n     * @param {RetrieveAggregateUsagePeriodEnum} period The period for aggregate statistics to check\n     * @param {number} value The value for the period (either hours or numbers)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccountsApi\n     */\n    public retrieveAggregateUsage(accountId: number, period: RetrieveAggregateUsagePeriodEnum, value: number, options?: RawAxiosRequestConfig) {\n        return AccountsApiFp(this.configuration).retrieveAggregateUsage(accountId, period, value, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n/**\n * @export\n */\nexport const RetrieveAggregateUsagePeriodEnum = {\n    Hour: 'hour',\n    Day: 'day'\n} as const;\nexport type RetrieveAggregateUsagePeriodEnum = typeof RetrieveAggregateUsagePeriodEnum[keyof typeof RetrieveAggregateUsagePeriodEnum];\n\n\n/**\n * AlertTargetsApi - axios parameter creator\n * @export\n */\nexport const AlertTargetsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a target for an alert. This is the HTTP endpoint that will be called when an alert is triggered.\n         * @param {number} accountId The ID of the account to create the alert target for\n         * @param {number} alertId The ID of the alert to create the target for\n         * @param {IAlertTargetConfigBase} iAlertTargetConfigBase Configuration for the alert target\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createAlertTarget: async (accountId: number, alertId: number, iAlertTargetConfigBase: IAlertTargetConfigBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('createAlertTarget', 'accountId', accountId)\n            // verify required parameter 'alertId' is not null or undefined\n            assertParamExists('createAlertTarget', 'alertId', alertId)\n            // verify required parameter 'iAlertTargetConfigBase' is not null or undefined\n            assertParamExists('createAlertTarget', 'iAlertTargetConfigBase', iAlertTargetConfigBase)\n            const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/targets/create`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)))\n                .replace(`{${\"alert_id\"}}`, encodeURIComponent(String(alertId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(iAlertTargetConfigBase, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete an alert target from the Sign API\n         * @param {number} accountId The ID of the account to delete the alert target from\n         * @param {number} alertId The ID of the alert to delete the target from\n         * @param {number} targetId The ID of the target to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteAlertTarget: async (accountId: number, alertId: number, targetId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('deleteAlertTarget', 'accountId', accountId)\n            // verify required parameter 'alertId' is not null or undefined\n            assertParamExists('deleteAlertTarget', 'alertId', alertId)\n            // verify required parameter 'targetId' is not null or undefined\n            assertParamExists('deleteAlertTarget', 'targetId', targetId)\n            const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/targets/{target_id}/delete`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)))\n                .replace(`{${\"alert_id\"}}`, encodeURIComponent(String(alertId)))\n                .replace(`{${\"target_id\"}}`, encodeURIComponent(String(targetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List all alert targets for a specific alert\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The alert to list targets for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAlertTargets: async (accountId: number, alertId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('listAlertTargets', 'accountId', accountId)\n            // verify required parameter 'alertId' is not null or undefined\n            assertParamExists('listAlertTargets', 'alertId', alertId)\n            const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/targets/list`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)))\n                .replace(`{${\"alert_id\"}}`, encodeURIComponent(String(alertId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Test an alert target\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The alert that the target belongs to\n         * @param {number} targetId The target to test\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        testAlertTarget: async (accountId: number, alertId: number, targetId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('testAlertTarget', 'accountId', accountId)\n            // verify required parameter 'alertId' is not null or undefined\n            assertParamExists('testAlertTarget', 'alertId', alertId)\n            // verify required parameter 'targetId' is not null or undefined\n            assertParamExists('testAlertTarget', 'targetId', targetId)\n            const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/targets/{target_id}/test`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)))\n                .replace(`{${\"alert_id\"}}`, encodeURIComponent(String(alertId)))\n                .replace(`{${\"target_id\"}}`, encodeURIComponent(String(targetId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AlertTargetsApi - functional programming interface\n * @export\n */\nexport const AlertTargetsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AlertTargetsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a target for an alert. This is the HTTP endpoint that will be called when an alert is triggered.\n         * @param {number} accountId The ID of the account to create the alert target for\n         * @param {number} alertId The ID of the alert to create the target for\n         * @param {IAlertTargetConfigBase} iAlertTargetConfigBase Configuration for the alert target\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createAlertTarget(accountId: number, alertId: number, iAlertTargetConfigBase: IAlertTargetConfigBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICreateAlertTargetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createAlertTarget(accountId, alertId, iAlertTargetConfigBase, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertTargetsApi.createAlertTarget']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Delete an alert target from the Sign API\n         * @param {number} accountId The ID of the account to delete the alert target from\n         * @param {number} alertId The ID of the alert to delete the target from\n         * @param {number} targetId The ID of the target to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteAlertTarget(accountId: number, alertId: number, targetId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IDeleteAlertTargetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAlertTarget(accountId, alertId, targetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertTargetsApi.deleteAlertTarget']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * List all alert targets for a specific alert\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The alert to list targets for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listAlertTargets(accountId: number, alertId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IListAlertTargetsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listAlertTargets(accountId, alertId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertTargetsApi.listAlertTargets']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Test an alert target\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The alert that the target belongs to\n         * @param {number} targetId The target to test\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async testAlertTarget(accountId: number, alertId: number, targetId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITestAlertTargetResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.testAlertTarget(accountId, alertId, targetId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertTargetsApi.testAlertTarget']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * AlertTargetsApi - factory interface\n * @export\n */\nexport const AlertTargetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AlertTargetsApiFp(configuration)\n    return {\n        /**\n         * Create a target for an alert. This is the HTTP endpoint that will be called when an alert is triggered.\n         * @param {number} accountId The ID of the account to create the alert target for\n         * @param {number} alertId The ID of the alert to create the target for\n         * @param {IAlertTargetConfigBase} iAlertTargetConfigBase Configuration for the alert target\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createAlertTarget(accountId: number, alertId: number, iAlertTargetConfigBase: IAlertTargetConfigBase, options?: RawAxiosRequestConfig): AxiosPromise<ICreateAlertTargetResponse> {\n            return localVarFp.createAlertTarget(accountId, alertId, iAlertTargetConfigBase, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete an alert target from the Sign API\n         * @param {number} accountId The ID of the account to delete the alert target from\n         * @param {number} alertId The ID of the alert to delete the target from\n         * @param {number} targetId The ID of the target to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteAlertTarget(accountId: number, alertId: number, targetId: number, options?: RawAxiosRequestConfig): AxiosPromise<IDeleteAlertTargetResponse> {\n            return localVarFp.deleteAlertTarget(accountId, alertId, targetId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List all alert targets for a specific alert\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The alert to list targets for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAlertTargets(accountId: number, alertId: number, options?: RawAxiosRequestConfig): AxiosPromise<IListAlertTargetsResponse> {\n            return localVarFp.listAlertTargets(accountId, alertId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Test an alert target\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The alert that the target belongs to\n         * @param {number} targetId The target to test\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        testAlertTarget(accountId: number, alertId: number, targetId: number, options?: RawAxiosRequestConfig): AxiosPromise<ITestAlertTargetResponse> {\n            return localVarFp.testAlertTarget(accountId, alertId, targetId, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AlertTargetsApi - object-oriented interface\n * @export\n * @class AlertTargetsApi\n * @extends {BaseAPI}\n */\nexport class AlertTargetsApi extends BaseAPI {\n    /**\n     * Create a target for an alert. This is the HTTP endpoint that will be called when an alert is triggered.\n     * @param {number} accountId The ID of the account to create the alert target for\n     * @param {number} alertId The ID of the alert to create the target for\n     * @param {IAlertTargetConfigBase} iAlertTargetConfigBase Configuration for the alert target\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertTargetsApi\n     */\n    public createAlertTarget(accountId: number, alertId: number, iAlertTargetConfigBase: IAlertTargetConfigBase, options?: RawAxiosRequestConfig) {\n        return AlertTargetsApiFp(this.configuration).createAlertTarget(accountId, alertId, iAlertTargetConfigBase, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete an alert target from the Sign API\n     * @param {number} accountId The ID of the account to delete the alert target from\n     * @param {number} alertId The ID of the alert to delete the target from\n     * @param {number} targetId The ID of the target to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertTargetsApi\n     */\n    public deleteAlertTarget(accountId: number, alertId: number, targetId: number, options?: RawAxiosRequestConfig) {\n        return AlertTargetsApiFp(this.configuration).deleteAlertTarget(accountId, alertId, targetId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List all alert targets for a specific alert\n     * @param {number} accountId The account that the alert belongs to\n     * @param {number} alertId The alert to list targets for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertTargetsApi\n     */\n    public listAlertTargets(accountId: number, alertId: number, options?: RawAxiosRequestConfig) {\n        return AlertTargetsApiFp(this.configuration).listAlertTargets(accountId, alertId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Test an alert target\n     * @param {number} accountId The account that the alert belongs to\n     * @param {number} alertId The alert that the target belongs to\n     * @param {number} targetId The target to test\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertTargetsApi\n     */\n    public testAlertTarget(accountId: number, alertId: number, targetId: number, options?: RawAxiosRequestConfig) {\n        return AlertTargetsApiFp(this.configuration).testAlertTarget(accountId, alertId, targetId, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n/**\n * AlertsApi - axios parameter creator\n * @export\n */\nexport const AlertsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a creator alert. These alerts are used to notify users of a new livestream.\n         * @param {number} accountId The ID of the account to create the alert for\n         * @param {IAlertConfigBase} iAlertConfigBase Configuration for the alert\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createAlert: async (accountId: number, iAlertConfigBase: IAlertConfigBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('createAlert', 'accountId', accountId)\n            // verify required parameter 'iAlertConfigBase' is not null or undefined\n            assertParamExists('createAlert', 'iAlertConfigBase', iAlertConfigBase)\n            const localVarPath = `/accounts/{account_id}/alerts/create`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(iAlertConfigBase, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete an alert from the Sign API\n         * @param {number} accountId The ID of the account to delete the alert from\n         * @param {number} alertId The ID of the alert to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteAlert: async (accountId: number, alertId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('deleteAlert', 'accountId', accountId)\n            // verify required parameter 'alertId' is not null or undefined\n            assertParamExists('deleteAlert', 'alertId', alertId)\n            const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/delete`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)))\n                .replace(`{${\"alert_id\"}}`, encodeURIComponent(String(alertId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} accountId \n         * @param {boolean} [includeRoomInfo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAlerts: async (accountId: number, includeRoomInfo?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('listAlerts', 'accountId', accountId)\n            const localVarPath = `/accounts/{account_id}/alerts/list`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (includeRoomInfo !== undefined) {\n                localVarQueryParameter['include_room_info'] = includeRoomInfo;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve a specific alert by its ID\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The ID of the alert to retrieve\n         * @param {boolean} [includeRoomInfo] Whether to include room information in the response\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveAlert: async (accountId: number, alertId: number, includeRoomInfo?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('retrieveAlert', 'accountId', accountId)\n            // verify required parameter 'alertId' is not null or undefined\n            assertParamExists('retrieveAlert', 'alertId', alertId)\n            const localVarPath = `/accounts/{account_id}/alerts/{alert_id}/retrieve`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)))\n                .replace(`{${\"alert_id\"}}`, encodeURIComponent(String(alertId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (includeRoomInfo !== undefined) {\n                localVarQueryParameter['include_room_info'] = includeRoomInfo;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AlertsApi - functional programming interface\n * @export\n */\nexport const AlertsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AlertsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a creator alert. These alerts are used to notify users of a new livestream.\n         * @param {number} accountId The ID of the account to create the alert for\n         * @param {IAlertConfigBase} iAlertConfigBase Configuration for the alert\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createAlert(accountId: number, iAlertConfigBase: IAlertConfigBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICreateAlertResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createAlert(accountId, iAlertConfigBase, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertsApi.createAlert']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Delete an alert from the Sign API\n         * @param {number} accountId The ID of the account to delete the alert from\n         * @param {number} alertId The ID of the alert to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteAlert(accountId: number, alertId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IDeleteAlertResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAlert(accountId, alertId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertsApi.deleteAlert']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {number} accountId \n         * @param {boolean} [includeRoomInfo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listAlerts(accountId: number, includeRoomInfo?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IListAlertsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listAlerts(accountId, includeRoomInfo, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertsApi.listAlerts']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve a specific alert by its ID\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The ID of the alert to retrieve\n         * @param {boolean} [includeRoomInfo] Whether to include room information in the response\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveAlert(accountId: number, alertId: number, includeRoomInfo?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRetrieveAlertResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveAlert(accountId, alertId, includeRoomInfo, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AlertsApi.retrieveAlert']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * AlertsApi - factory interface\n * @export\n */\nexport const AlertsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AlertsApiFp(configuration)\n    return {\n        /**\n         * Create a creator alert. These alerts are used to notify users of a new livestream.\n         * @param {number} accountId The ID of the account to create the alert for\n         * @param {IAlertConfigBase} iAlertConfigBase Configuration for the alert\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createAlert(accountId: number, iAlertConfigBase: IAlertConfigBase, options?: RawAxiosRequestConfig): AxiosPromise<ICreateAlertResponse> {\n            return localVarFp.createAlert(accountId, iAlertConfigBase, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete an alert from the Sign API\n         * @param {number} accountId The ID of the account to delete the alert from\n         * @param {number} alertId The ID of the alert to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteAlert(accountId: number, alertId: number, options?: RawAxiosRequestConfig): AxiosPromise<IDeleteAlertResponse> {\n            return localVarFp.deleteAlert(accountId, alertId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} accountId \n         * @param {boolean} [includeRoomInfo] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listAlerts(accountId: number, includeRoomInfo?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IListAlertsResponse> {\n            return localVarFp.listAlerts(accountId, includeRoomInfo, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve a specific alert by its ID\n         * @param {number} accountId The account that the alert belongs to\n         * @param {number} alertId The ID of the alert to retrieve\n         * @param {boolean} [includeRoomInfo] Whether to include room information in the response\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveAlert(accountId: number, alertId: number, includeRoomInfo?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IRetrieveAlertResponse> {\n            return localVarFp.retrieveAlert(accountId, alertId, includeRoomInfo, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AlertsApi - object-oriented interface\n * @export\n * @class AlertsApi\n * @extends {BaseAPI}\n */\nexport class AlertsApi extends BaseAPI {\n    /**\n     * Create a creator alert. These alerts are used to notify users of a new livestream.\n     * @param {number} accountId The ID of the account to create the alert for\n     * @param {IAlertConfigBase} iAlertConfigBase Configuration for the alert\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertsApi\n     */\n    public createAlert(accountId: number, iAlertConfigBase: IAlertConfigBase, options?: RawAxiosRequestConfig) {\n        return AlertsApiFp(this.configuration).createAlert(accountId, iAlertConfigBase, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete an alert from the Sign API\n     * @param {number} accountId The ID of the account to delete the alert from\n     * @param {number} alertId The ID of the alert to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertsApi\n     */\n    public deleteAlert(accountId: number, alertId: number, options?: RawAxiosRequestConfig) {\n        return AlertsApiFp(this.configuration).deleteAlert(accountId, alertId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} accountId \n     * @param {boolean} [includeRoomInfo] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertsApi\n     */\n    public listAlerts(accountId: number, includeRoomInfo?: boolean, options?: RawAxiosRequestConfig) {\n        return AlertsApiFp(this.configuration).listAlerts(accountId, includeRoomInfo, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve a specific alert by its ID\n     * @param {number} accountId The account that the alert belongs to\n     * @param {number} alertId The ID of the alert to retrieve\n     * @param {boolean} [includeRoomInfo] Whether to include room information in the response\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AlertsApi\n     */\n    public retrieveAlert(accountId: number, alertId: number, includeRoomInfo?: boolean, options?: RawAxiosRequestConfig) {\n        return AlertsApiFp(this.configuration).retrieveAlert(accountId, alertId, includeRoomInfo, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n/**\n * AnalyticsApi - axios parameter creator\n * @export\n */\nexport const AnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Retrieve the currently connected agents\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchAgents: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/analytics/agents`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve the list of API hosts (used for horizontal scaling)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getHosts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/analytics/hosts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve stats as an SVG\n         * @param {LogRequestMethod} statName Name of the stat to retrieve\n         * @param {string} [labelColour] Specify label colour in SVG\n         * @param {string} [valueColour] Specify value colour in SVG\n         * @param {number} [hours] The number of hours to retrieve the stat for\n         * @param {LiveClient} [client] The client to filter for\n         * @param {boolean} [json] Add the ability to retrieve the pip as JSON\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pips: async (statName: LogRequestMethod, labelColour?: string, valueColour?: string, hours?: number, client?: LiveClient, json?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'statName' is not null or undefined\n            assertParamExists('pips', 'statName', statName)\n            const localVarPath = `/analytics/pips/{statName}`\n                .replace(`{${\"statName\"}}`, encodeURIComponent(String(statName)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (labelColour !== undefined) {\n                localVarQueryParameter['labelColour'] = labelColour;\n            }\n\n            if (valueColour !== undefined) {\n                localVarQueryParameter['valueColour'] = valueColour;\n            }\n\n            if (hours !== undefined) {\n                localVarQueryParameter['hours'] = hours;\n            }\n\n            if (client !== undefined) {\n                localVarQueryParameter['client'] = client;\n            }\n\n            if (json !== undefined) {\n                localVarQueryParameter['json'] = json;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AnalyticsApi - functional programming interface\n * @export\n */\nexport const AnalyticsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AnalyticsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Retrieve the currently connected agents\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetchAgents(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRetrieveAgentHostsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAgents(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.fetchAgents']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve the list of API hosts (used for horizontal scaling)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getHosts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IHostsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getHosts(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.getHosts']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve stats as an SVG\n         * @param {LogRequestMethod} statName Name of the stat to retrieve\n         * @param {string} [labelColour] Specify label colour in SVG\n         * @param {string} [valueColour] Specify value colour in SVG\n         * @param {number} [hours] The number of hours to retrieve the stat for\n         * @param {LiveClient} [client] The client to filter for\n         * @param {boolean} [json] Add the ability to retrieve the pip as JSON\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async pips(statName: LogRequestMethod, labelColour?: string, valueColour?: string, hours?: number, client?: LiveClient, json?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pips200Response>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.pips(statName, labelColour, valueColour, hours, client, json, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.pips']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * AnalyticsApi - factory interface\n * @export\n */\nexport const AnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AnalyticsApiFp(configuration)\n    return {\n        /**\n         * Retrieve the currently connected agents\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchAgents(options?: RawAxiosRequestConfig): AxiosPromise<IRetrieveAgentHostsResponse> {\n            return localVarFp.fetchAgents(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve the list of API hosts (used for horizontal scaling)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getHosts(options?: RawAxiosRequestConfig): AxiosPromise<IHostsResponse> {\n            return localVarFp.getHosts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve stats as an SVG\n         * @param {LogRequestMethod} statName Name of the stat to retrieve\n         * @param {string} [labelColour] Specify label colour in SVG\n         * @param {string} [valueColour] Specify value colour in SVG\n         * @param {number} [hours] The number of hours to retrieve the stat for\n         * @param {LiveClient} [client] The client to filter for\n         * @param {boolean} [json] Add the ability to retrieve the pip as JSON\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pips(statName: LogRequestMethod, labelColour?: string, valueColour?: string, hours?: number, client?: LiveClient, json?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Pips200Response> {\n            return localVarFp.pips(statName, labelColour, valueColour, hours, client, json, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AnalyticsApi - object-oriented interface\n * @export\n * @class AnalyticsApi\n * @extends {BaseAPI}\n */\nexport class AnalyticsApi extends BaseAPI {\n    /**\n     * Retrieve the currently connected agents\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AnalyticsApi\n     */\n    public fetchAgents(options?: RawAxiosRequestConfig) {\n        return AnalyticsApiFp(this.configuration).fetchAgents(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve the list of API hosts (used for horizontal scaling)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AnalyticsApi\n     */\n    public getHosts(options?: RawAxiosRequestConfig) {\n        return AnalyticsApiFp(this.configuration).getHosts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve stats as an SVG\n     * @param {LogRequestMethod} statName Name of the stat to retrieve\n     * @param {string} [labelColour] Specify label colour in SVG\n     * @param {string} [valueColour] Specify value colour in SVG\n     * @param {number} [hours] The number of hours to retrieve the stat for\n     * @param {LiveClient} [client] The client to filter for\n     * @param {boolean} [json] Add the ability to retrieve the pip as JSON\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AnalyticsApi\n     */\n    public pips(statName: LogRequestMethod, labelColour?: string, valueColour?: string, hours?: number, client?: LiveClient, json?: boolean, options?: RawAxiosRequestConfig) {\n        return AnalyticsApiFp(this.configuration).pips(statName, labelColour, valueColour, hours, client, json, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n/**\n * AuthenticationApi - axios parameter creator\n * @export\n */\nexport const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Create a JWT for a given API key. Note that these JWT keys are only valid for the non-authenticated Webcast endpoints. They function to attach the rate limits of the API key to the request for client-sided applications.\n         * @param {number} accountId The ID of the account to create the JWT for\n         * @param {JWTCreateConfig} jWTCreateConfig The configuration for the JWT\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createJWT: async (accountId: number, jWTCreateConfig: JWTCreateConfig, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('createJWT', 'accountId', accountId)\n            // verify required parameter 'jWTCreateConfig' is not null or undefined\n            assertParamExists('createJWT', 'jWTCreateConfig', jWTCreateConfig)\n            const localVarPath = `/accounts/{account_id}/jwt/create`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(jWTCreateConfig, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Create a new API key\n         * @param {number} accountId The ID of the account to create the key for\n         * @param {IApiKeyConfigBase} iApiKeyConfigBase The configuration for the new key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKey: async (accountId: number, iApiKeyConfigBase: IApiKeyConfigBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('createKey', 'accountId', accountId)\n            // verify required parameter 'iApiKeyConfigBase' is not null or undefined\n            assertParamExists('createKey', 'iApiKeyConfigBase', iApiKeyConfigBase)\n            const localVarPath = `/accounts/{account_id}/api_keys/create`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(iApiKeyConfigBase, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Delete an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to delete the key for\n         * @param {DeleteKeyDeleteByEnum} deleteBy The API key field to delete by\n         * @param {string} deleteParam The API key field value to delete by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKey: async (accountId: number, deleteBy: DeleteKeyDeleteByEnum, deleteParam: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('deleteKey', 'accountId', accountId)\n            // verify required parameter 'deleteBy' is not null or undefined\n            assertParamExists('deleteKey', 'deleteBy', deleteBy)\n            // verify required parameter 'deleteParam' is not null or undefined\n            assertParamExists('deleteKey', 'deleteParam', deleteParam)\n            const localVarPath = `/accounts/{account_id}/api_keys/delete`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (deleteBy !== undefined) {\n                localVarQueryParameter['delete_by'] = deleteBy;\n            }\n\n            if (deleteParam !== undefined) {\n                localVarQueryParameter['delete_param'] = deleteParam;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to retrieve the key for\n         * @param {string} retrieveParam The API key field value to retrieve by\n         * @param {GetKeyRetrieveByEnum} [retrieveBy] The API key field to retrieve by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKey: async (accountId: number, retrieveParam: string, retrieveBy?: GetKeyRetrieveByEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('getKey', 'accountId', accountId)\n            // verify required parameter 'retrieveParam' is not null or undefined\n            assertParamExists('getKey', 'retrieveParam', retrieveParam)\n            const localVarPath = `/accounts/{account_id}/api_keys/retrieve`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (retrieveBy !== undefined) {\n                localVarQueryParameter['retrieve_by'] = retrieveBy;\n            }\n\n            if (retrieveParam !== undefined) {\n                localVarQueryParameter['retrieve_param'] = retrieveParam;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to retrieve the key for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKeys: async (accountId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('listKeys', 'accountId', accountId)\n            const localVarPath = `/accounts/{account_id}/api_keys/list`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update an existing API key\n         * @param {number} accountId The account to update the key for\n         * @param {UpdateKeyUpdateByEnum} updateBy The API key field to update by\n         * @param {string} updateParam The API key field value to update by\n         * @param {IApiKeyConfigBase} iApiKeyConfigBase The new configuration for the key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateKey: async (accountId: number, updateBy: UpdateKeyUpdateByEnum, updateParam: string, iApiKeyConfigBase: IApiKeyConfigBase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('updateKey', 'accountId', accountId)\n            // verify required parameter 'updateBy' is not null or undefined\n            assertParamExists('updateKey', 'updateBy', updateBy)\n            // verify required parameter 'updateParam' is not null or undefined\n            assertParamExists('updateKey', 'updateParam', updateParam)\n            // verify required parameter 'iApiKeyConfigBase' is not null or undefined\n            assertParamExists('updateKey', 'iApiKeyConfigBase', iApiKeyConfigBase)\n            const localVarPath = `/accounts/{account_id}/api_keys/update`\n                .replace(`{${\"account_id\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (updateBy !== undefined) {\n                localVarQueryParameter['update_by'] = updateBy;\n            }\n\n            if (updateParam !== undefined) {\n                localVarQueryParameter['update_param'] = updateParam;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(iApiKeyConfigBase, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AuthenticationApi - functional programming interface\n * @export\n */\nexport const AuthenticationApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Create a JWT for a given API key. Note that these JWT keys are only valid for the non-authenticated Webcast endpoints. They function to attach the rate limits of the API key to the request for client-sided applications.\n         * @param {number} accountId The ID of the account to create the JWT for\n         * @param {JWTCreateConfig} jWTCreateConfig The configuration for the JWT\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createJWT(accountId: number, jWTCreateConfig: JWTCreateConfig, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICreateJWTResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createJWT(accountId, jWTCreateConfig, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.createJWT']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new API key\n         * @param {number} accountId The ID of the account to create the key for\n         * @param {IApiKeyConfigBase} iApiKeyConfigBase The configuration for the new key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKey(accountId: number, iApiKeyConfigBase: IApiKeyConfigBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICreateKeyResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createKey(accountId, iApiKeyConfigBase, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.createKey']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Delete an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to delete the key for\n         * @param {DeleteKeyDeleteByEnum} deleteBy The API key field to delete by\n         * @param {string} deleteParam The API key field value to delete by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKey(accountId: number, deleteBy: DeleteKeyDeleteByEnum, deleteParam: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IDeleteKeyResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteKey(accountId, deleteBy, deleteParam, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.deleteKey']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to retrieve the key for\n         * @param {string} retrieveParam The API key field value to retrieve by\n         * @param {GetKeyRetrieveByEnum} [retrieveBy] The API key field to retrieve by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKey(accountId: number, retrieveParam: string, retrieveBy?: GetKeyRetrieveByEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRetrieveKeyResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getKey(accountId, retrieveParam, retrieveBy, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.getKey']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to retrieve the key for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKeys(accountId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IListKeysResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listKeys(accountId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.listKeys']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update an existing API key\n         * @param {number} accountId The account to update the key for\n         * @param {UpdateKeyUpdateByEnum} updateBy The API key field to update by\n         * @param {string} updateParam The API key field value to update by\n         * @param {IApiKeyConfigBase} iApiKeyConfigBase The new configuration for the key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateKey(accountId: number, updateBy: UpdateKeyUpdateByEnum, updateParam: string, iApiKeyConfigBase: IApiKeyConfigBase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUpdateKeyResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateKey(accountId, updateBy, updateParam, iApiKeyConfigBase, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.updateKey']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * AuthenticationApi - factory interface\n * @export\n */\nexport const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AuthenticationApiFp(configuration)\n    return {\n        /**\n         * Create a JWT for a given API key. Note that these JWT keys are only valid for the non-authenticated Webcast endpoints. They function to attach the rate limits of the API key to the request for client-sided applications.\n         * @param {number} accountId The ID of the account to create the JWT for\n         * @param {JWTCreateConfig} jWTCreateConfig The configuration for the JWT\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createJWT(accountId: number, jWTCreateConfig: JWTCreateConfig, options?: RawAxiosRequestConfig): AxiosPromise<ICreateJWTResponse> {\n            return localVarFp.createJWT(accountId, jWTCreateConfig, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Create a new API key\n         * @param {number} accountId The ID of the account to create the key for\n         * @param {IApiKeyConfigBase} iApiKeyConfigBase The configuration for the new key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKey(accountId: number, iApiKeyConfigBase: IApiKeyConfigBase, options?: RawAxiosRequestConfig): AxiosPromise<ICreateKeyResponse> {\n            return localVarFp.createKey(accountId, iApiKeyConfigBase, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Delete an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to delete the key for\n         * @param {DeleteKeyDeleteByEnum} deleteBy The API key field to delete by\n         * @param {string} deleteParam The API key field value to delete by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKey(accountId: number, deleteBy: DeleteKeyDeleteByEnum, deleteParam: string, options?: RawAxiosRequestConfig): AxiosPromise<IDeleteKeyResponse> {\n            return localVarFp.deleteKey(accountId, deleteBy, deleteParam, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to retrieve the key for\n         * @param {string} retrieveParam The API key field value to retrieve by\n         * @param {GetKeyRetrieveByEnum} [retrieveBy] The API key field to retrieve by\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKey(accountId: number, retrieveParam: string, retrieveBy?: GetKeyRetrieveByEnum, options?: RawAxiosRequestConfig): AxiosPromise<IRetrieveKeyResponse> {\n            return localVarFp.getKey(accountId, retrieveParam, retrieveBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve an API key by its key value, name, or ID\n         * @param {number} accountId The ID of the account to retrieve the key for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKeys(accountId: number, options?: RawAxiosRequestConfig): AxiosPromise<IListKeysResponse> {\n            return localVarFp.listKeys(accountId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update an existing API key\n         * @param {number} accountId The account to update the key for\n         * @param {UpdateKeyUpdateByEnum} updateBy The API key field to update by\n         * @param {string} updateParam The API key field value to update by\n         * @param {IApiKeyConfigBase} iApiKeyConfigBase The new configuration for the key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateKey(accountId: number, updateBy: UpdateKeyUpdateByEnum, updateParam: string, iApiKeyConfigBase: IApiKeyConfigBase, options?: RawAxiosRequestConfig): AxiosPromise<IUpdateKeyResponse> {\n            return localVarFp.updateKey(accountId, updateBy, updateParam, iApiKeyConfigBase, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AuthenticationApi - object-oriented interface\n * @export\n * @class AuthenticationApi\n * @extends {BaseAPI}\n */\nexport class AuthenticationApi extends BaseAPI {\n    /**\n     * Create a JWT for a given API key. Note that these JWT keys are only valid for the non-authenticated Webcast endpoints. They function to attach the rate limits of the API key to the request for client-sided applications.\n     * @param {number} accountId The ID of the account to create the JWT for\n     * @param {JWTCreateConfig} jWTCreateConfig The configuration for the JWT\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public createJWT(accountId: number, jWTCreateConfig: JWTCreateConfig, options?: RawAxiosRequestConfig) {\n        return AuthenticationApiFp(this.configuration).createJWT(accountId, jWTCreateConfig, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Create a new API key\n     * @param {number} accountId The ID of the account to create the key for\n     * @param {IApiKeyConfigBase} iApiKeyConfigBase The configuration for the new key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public createKey(accountId: number, iApiKeyConfigBase: IApiKeyConfigBase, options?: RawAxiosRequestConfig) {\n        return AuthenticationApiFp(this.configuration).createKey(accountId, iApiKeyConfigBase, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Delete an API key by its key value, name, or ID\n     * @param {number} accountId The ID of the account to delete the key for\n     * @param {DeleteKeyDeleteByEnum} deleteBy The API key field to delete by\n     * @param {string} deleteParam The API key field value to delete by\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public deleteKey(accountId: number, deleteBy: DeleteKeyDeleteByEnum, deleteParam: string, options?: RawAxiosRequestConfig) {\n        return AuthenticationApiFp(this.configuration).deleteKey(accountId, deleteBy, deleteParam, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve an API key by its key value, name, or ID\n     * @param {number} accountId The ID of the account to retrieve the key for\n     * @param {string} retrieveParam The API key field value to retrieve by\n     * @param {GetKeyRetrieveByEnum} [retrieveBy] The API key field to retrieve by\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public getKey(accountId: number, retrieveParam: string, retrieveBy?: GetKeyRetrieveByEnum, options?: RawAxiosRequestConfig) {\n        return AuthenticationApiFp(this.configuration).getKey(accountId, retrieveParam, retrieveBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve an API key by its key value, name, or ID\n     * @param {number} accountId The ID of the account to retrieve the key for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public listKeys(accountId: number, options?: RawAxiosRequestConfig) {\n        return AuthenticationApiFp(this.configuration).listKeys(accountId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update an existing API key\n     * @param {number} accountId The account to update the key for\n     * @param {UpdateKeyUpdateByEnum} updateBy The API key field to update by\n     * @param {string} updateParam The API key field value to update by\n     * @param {IApiKeyConfigBase} iApiKeyConfigBase The new configuration for the key\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthenticationApi\n     */\n    public updateKey(accountId: number, updateBy: UpdateKeyUpdateByEnum, updateParam: string, iApiKeyConfigBase: IApiKeyConfigBase, options?: RawAxiosRequestConfig) {\n        return AuthenticationApiFp(this.configuration).updateKey(accountId, updateBy, updateParam, iApiKeyConfigBase, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n/**\n * @export\n */\nexport const DeleteKeyDeleteByEnum = {\n    Value: 'value',\n    Name: 'name',\n    Id: 'id'\n} as const;\nexport type DeleteKeyDeleteByEnum = typeof DeleteKeyDeleteByEnum[keyof typeof DeleteKeyDeleteByEnum];\n/**\n * @export\n */\nexport const GetKeyRetrieveByEnum = {\n    Value: 'value',\n    Name: 'name',\n    Id: 'id'\n} as const;\nexport type GetKeyRetrieveByEnum = typeof GetKeyRetrieveByEnum[keyof typeof GetKeyRetrieveByEnum];\n/**\n * @export\n */\nexport const UpdateKeyUpdateByEnum = {\n    Value: 'value',\n    Name: 'name',\n    Id: 'id'\n} as const;\nexport type UpdateKeyUpdateByEnum = typeof UpdateKeyUpdateByEnum[keyof typeof UpdateKeyUpdateByEnum];\n\n\n/**\n * WebcastApi - axios parameter creator\n * @export\n */\nexport const WebcastApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Fetch the WebSocket URL & first payload for a TikTok LIVE Room given a Room Id.\n         * @param {string} client The client ID\n         * @param {string} [roomId] The room ID to fetch the webcast URL for\n         * @param {string} [uniqueId] The unique ID of the TikTok user. Only available to Enterprise users.\n         * @param {string} [cursor] The cursor to fetch the webcast URL for\n         * @param {string} [sessionId] The session ID used to fetch a privileged WS connection\n         * @param {string} [userAgent] Override the user agent used in the signature\n         * @param {string} [ttTargetIdc] The target IDC to use for the request\n         * @param {boolean} [clientEnter] Whether the client is entering the room\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchWebcastURL: async (client: string, roomId?: string, uniqueId?: string, cursor?: string, sessionId?: string, userAgent?: string, ttTargetIdc?: string, clientEnter?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'client' is not null or undefined\n            assertParamExists('fetchWebcastURL', 'client', client)\n            const localVarPath = `/webcast/fetch`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (client !== undefined) {\n                localVarQueryParameter['client'] = client;\n            }\n\n            if (roomId !== undefined) {\n                localVarQueryParameter['room_id'] = roomId;\n            }\n\n            if (uniqueId !== undefined) {\n                localVarQueryParameter['unique_id'] = uniqueId;\n            }\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n            if (sessionId !== undefined) {\n                localVarQueryParameter['session_id'] = sessionId;\n            }\n\n            if (userAgent !== undefined) {\n                localVarQueryParameter['user_agent'] = userAgent;\n            }\n\n            if (ttTargetIdc !== undefined) {\n                localVarQueryParameter['tt_target_idc'] = ttTargetIdc;\n            }\n\n            if (clientEnter !== undefined) {\n                localVarQueryParameter['client_enter'] = clientEnter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve the currently connected WebSocket clients for your account. Only for paid plans.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectedWebSockets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/webcast/websockets`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve the rate limits for the provided API key (or the unauthenticated limits if no key is provided)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRateLimits: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/webcast/rate_limits`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch TikTok LIVE Stream Cover URL given a uniqueId.\n         * @param {string} uniqueId The unique ID of the TikTok to fetch the cover for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomCover: async (uniqueId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uniqueId' is not null or undefined\n            assertParamExists('retrieveRoomCover', 'uniqueId', uniqueId)\n            const localVarPath = `/webcast/room_cover`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (uniqueId !== undefined) {\n                localVarQueryParameter['uniqueId'] = uniqueId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch Room Id for a given uniqueId & whether that user is live.\n         * @param {string} uniqueId The unique ID of the TikTok user to fetch the data for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomId: async (uniqueId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uniqueId' is not null or undefined\n            assertParamExists('retrieveRoomId', 'uniqueId', uniqueId)\n            const localVarPath = `/webcast/room_id`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (uniqueId !== undefined) {\n                localVarQueryParameter['uniqueId'] = uniqueId;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve TikTok Live Room Information\n         * @param {string} uniqueId The unique identifier for the TikTok user or room\n         * @param {boolean} [giftInfo] Optional flag to include gift information in the response\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomInfo: async (uniqueId: string, giftInfo?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uniqueId' is not null or undefined\n            assertParamExists('retrieveRoomInfo', 'uniqueId', uniqueId)\n            const localVarPath = `/webcast/room_info`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (uniqueId !== undefined) {\n                localVarQueryParameter['uniqueId'] = uniqueId;\n            }\n\n            if (giftInfo !== undefined) {\n                localVarQueryParameter['giftInfo'] = giftInfo;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Fetch TikTok LIVE Stream video given a uniqueId.\n         * @param {string} uniqueId The unique ID of the TikTok to fetch the data for.\n         * @param {StreamType} [streamType] The type of video stream to fetch. Default is HLS_SD.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomVideo: async (uniqueId: string, streamType?: StreamType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uniqueId' is not null or undefined\n            assertParamExists('retrieveRoomVideo', 'uniqueId', uniqueId)\n            const localVarPath = `/webcast/room_video`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication jwt_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-jwt-key\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n            if (uniqueId !== undefined) {\n                localVarQueryParameter['uniqueId'] = uniqueId;\n            }\n\n            if (streamType !== undefined) {\n                localVarQueryParameter['streamType'] = streamType;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Send a chat to a TikTok LIVE room.\n         * @param {IWebcastRoomChatPayload} iWebcastRoomChatPayload The payload configuration for sending a chat\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sendRoomChat: async (iWebcastRoomChatPayload: IWebcastRoomChatPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'iWebcastRoomChatPayload' is not null or undefined\n            assertParamExists('sendRoomChat', 'iWebcastRoomChatPayload', iWebcastRoomChatPayload)\n            const localVarPath = `/webcast/chat`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(iWebcastRoomChatPayload, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {ISignTikTokUrlBody} iSignTikTokUrlBody \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        signWebcastUrl: async (iSignTikTokUrlBody: ISignTikTokUrlBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'iSignTikTokUrlBody' is not null or undefined\n            assertParamExists('signWebcastUrl', 'iSignTikTokUrlBody', iSignTikTokUrlBody)\n            const localVarPath = `/webcast/sign_url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key_query required\n            await setApiKeyToObject(localVarQueryParameter, \"apiKey\", configuration)\n\n            // authentication api_key_header required\n            await setApiKeyToObject(localVarHeaderParameter, \"x-api-key\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(iSignTikTokUrlBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * WebcastApi - functional programming interface\n * @export\n */\nexport const WebcastApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = WebcastApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Fetch the WebSocket URL & first payload for a TikTok LIVE Room given a Room Id.\n         * @param {string} client The client ID\n         * @param {string} [roomId] The room ID to fetch the webcast URL for\n         * @param {string} [uniqueId] The unique ID of the TikTok user. Only available to Enterprise users.\n         * @param {string} [cursor] The cursor to fetch the webcast URL for\n         * @param {string} [sessionId] The session ID used to fetch a privileged WS connection\n         * @param {string} [userAgent] Override the user agent used in the signature\n         * @param {string} [ttTargetIdc] The target IDC to use for the request\n         * @param {boolean} [clientEnter] Whether the client is entering the room\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async fetchWebcastURL(client: string, roomId?: string, uniqueId?: string, cursor?: string, sessionId?: string, userAgent?: string, ttTargetIdc?: string, clientEnter?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchWebcastURL(client, roomId, uniqueId, cursor, sessionId, userAgent, ttTargetIdc, clientEnter, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['WebcastApi.fetchWebcastURL']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve the currently connected WebSocket clients for your account. Only for paid plans.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getConnectedWebSockets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRetrievedCloudWebSocketsRouteResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getConnectedWebSockets(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['WebcastApi.getConnectedWebSockets']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve the rate limits for the provided API key (or the unauthenticated limits if no key is provided)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getRateLimits(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IGetRateLimits>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getRateLimits(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['WebcastApi.getRateLimits']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch TikTok LIVE Stream Cover URL given a uniqueId.\n         * @param {string} uniqueId The unique ID of the TikTok to fetch the cover for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveRoomCover(uniqueId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IJSONResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRoomCover(uniqueId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['WebcastApi.retrieveRoomCover']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch Room Id for a given uniqueId & whether that user is live.\n         * @param {string} uniqueId The unique ID of the TikTok user to fetch the data for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveRoomId(uniqueId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IWebcastRoomIdRouteResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRoomId(uniqueId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['WebcastApi.retrieveRoomId']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieve TikTok Live Room Information\n         * @param {string} uniqueId The unique identifier for the TikTok user or room\n         * @param {boolean} [giftInfo] Optional flag to include gift information in the response\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveRoomInfo(uniqueId: string, giftInfo?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IWebcastRoomInfoRouteResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRoomInfo(uniqueId, giftInfo, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['WebcastApi.retrieveRoomInfo']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch TikTok LIVE Stream video given a uniqueId.\n         * @param {string} uniqueId The unique ID of the TikTok to fetch the data for.\n         * @param {StreamType} [streamType] The type of video stream to fetch. Default is HLS_SD.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async retrieveRoomVideo(uniqueId: string, streamType?: StreamType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IJSONResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveRoomVideo(uniqueId, streamType, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['WebcastApi.retrieveRoomVideo']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Send a chat to a TikTok LIVE room.\n         * @param {IWebcastRoomChatPayload} iWebcastRoomChatPayload The payload configuration for sending a chat\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sendRoomChat(iWebcastRoomChatPayload: IWebcastRoomChatPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IWebcastRoomChatRouteResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sendRoomChat(iWebcastRoomChatPayload, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['WebcastApi.sendRoomChat']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {ISignTikTokUrlBody} iSignTikTokUrlBody \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async signWebcastUrl(iSignTikTokUrlBody: ISignTikTokUrlBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignWebcastUrl200Response>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.signWebcastUrl(iSignTikTokUrlBody, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['WebcastApi.signWebcastUrl']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * WebcastApi - factory interface\n * @export\n */\nexport const WebcastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = WebcastApiFp(configuration)\n    return {\n        /**\n         * Fetch the WebSocket URL & first payload for a TikTok LIVE Room given a Room Id.\n         * @param {string} client The client ID\n         * @param {string} [roomId] The room ID to fetch the webcast URL for\n         * @param {string} [uniqueId] The unique ID of the TikTok user. Only available to Enterprise users.\n         * @param {string} [cursor] The cursor to fetch the webcast URL for\n         * @param {string} [sessionId] The session ID used to fetch a privileged WS connection\n         * @param {string} [userAgent] Override the user agent used in the signature\n         * @param {string} [ttTargetIdc] The target IDC to use for the request\n         * @param {boolean} [clientEnter] Whether the client is entering the room\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        fetchWebcastURL(client: string, roomId?: string, uniqueId?: string, cursor?: string, sessionId?: string, userAgent?: string, ttTargetIdc?: string, clientEnter?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.fetchWebcastURL(client, roomId, uniqueId, cursor, sessionId, userAgent, ttTargetIdc, clientEnter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve the currently connected WebSocket clients for your account. Only for paid plans.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConnectedWebSockets(options?: RawAxiosRequestConfig): AxiosPromise<IRetrievedCloudWebSocketsRouteResponse> {\n            return localVarFp.getConnectedWebSockets(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve the rate limits for the provided API key (or the unauthenticated limits if no key is provided)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRateLimits(options?: RawAxiosRequestConfig): AxiosPromise<IGetRateLimits> {\n            return localVarFp.getRateLimits(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Fetch TikTok LIVE Stream Cover URL given a uniqueId.\n         * @param {string} uniqueId The unique ID of the TikTok to fetch the cover for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomCover(uniqueId: string, options?: RawAxiosRequestConfig): AxiosPromise<IJSONResponse> {\n            return localVarFp.retrieveRoomCover(uniqueId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Fetch Room Id for a given uniqueId & whether that user is live.\n         * @param {string} uniqueId The unique ID of the TikTok user to fetch the data for.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomId(uniqueId: string, options?: RawAxiosRequestConfig): AxiosPromise<IWebcastRoomIdRouteResponse> {\n            return localVarFp.retrieveRoomId(uniqueId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve TikTok Live Room Information\n         * @param {string} uniqueId The unique identifier for the TikTok user or room\n         * @param {boolean} [giftInfo] Optional flag to include gift information in the response\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomInfo(uniqueId: string, giftInfo?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IWebcastRoomInfoRouteResponse> {\n            return localVarFp.retrieveRoomInfo(uniqueId, giftInfo, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Fetch TikTok LIVE Stream video given a uniqueId.\n         * @param {string} uniqueId The unique ID of the TikTok to fetch the data for.\n         * @param {StreamType} [streamType] The type of video stream to fetch. Default is HLS_SD.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveRoomVideo(uniqueId: string, streamType?: StreamType, options?: RawAxiosRequestConfig): AxiosPromise<IJSONResponse> {\n            return localVarFp.retrieveRoomVideo(uniqueId, streamType, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Send a chat to a TikTok LIVE room.\n         * @param {IWebcastRoomChatPayload} iWebcastRoomChatPayload The payload configuration for sending a chat\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sendRoomChat(iWebcastRoomChatPayload: IWebcastRoomChatPayload, options?: RawAxiosRequestConfig): AxiosPromise<IWebcastRoomChatRouteResponse> {\n            return localVarFp.sendRoomChat(iWebcastRoomChatPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {ISignTikTokUrlBody} iSignTikTokUrlBody \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        signWebcastUrl(iSignTikTokUrlBody: ISignTikTokUrlBody, options?: RawAxiosRequestConfig): AxiosPromise<SignWebcastUrl200Response> {\n            return localVarFp.signWebcastUrl(iSignTikTokUrlBody, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * WebcastApi - object-oriented interface\n * @export\n * @class WebcastApi\n * @extends {BaseAPI}\n */\nexport class WebcastApi extends BaseAPI {\n    /**\n     * Fetch the WebSocket URL & first payload for a TikTok LIVE Room given a Room Id.\n     * @param {string} client The client ID\n     * @param {string} [roomId] The room ID to fetch the webcast URL for\n     * @param {string} [uniqueId] The unique ID of the TikTok user. Only available to Enterprise users.\n     * @param {string} [cursor] The cursor to fetch the webcast URL for\n     * @param {string} [sessionId] The session ID used to fetch a privileged WS connection\n     * @param {string} [userAgent] Override the user agent used in the signature\n     * @param {string} [ttTargetIdc] The target IDC to use for the request\n     * @param {boolean} [clientEnter] Whether the client is entering the room\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebcastApi\n     */\n    public fetchWebcastURL(client: string, roomId?: string, uniqueId?: string, cursor?: string, sessionId?: string, userAgent?: string, ttTargetIdc?: string, clientEnter?: boolean, options?: RawAxiosRequestConfig) {\n        return WebcastApiFp(this.configuration).fetchWebcastURL(client, roomId, uniqueId, cursor, sessionId, userAgent, ttTargetIdc, clientEnter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve the currently connected WebSocket clients for your account. Only for paid plans.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebcastApi\n     */\n    public getConnectedWebSockets(options?: RawAxiosRequestConfig) {\n        return WebcastApiFp(this.configuration).getConnectedWebSockets(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve the rate limits for the provided API key (or the unauthenticated limits if no key is provided)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebcastApi\n     */\n    public getRateLimits(options?: RawAxiosRequestConfig) {\n        return WebcastApiFp(this.configuration).getRateLimits(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Fetch TikTok LIVE Stream Cover URL given a uniqueId.\n     * @param {string} uniqueId The unique ID of the TikTok to fetch the cover for.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebcastApi\n     */\n    public retrieveRoomCover(uniqueId: string, options?: RawAxiosRequestConfig) {\n        return WebcastApiFp(this.configuration).retrieveRoomCover(uniqueId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Fetch Room Id for a given uniqueId & whether that user is live.\n     * @param {string} uniqueId The unique ID of the TikTok user to fetch the data for.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebcastApi\n     */\n    public retrieveRoomId(uniqueId: string, options?: RawAxiosRequestConfig) {\n        return WebcastApiFp(this.configuration).retrieveRoomId(uniqueId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve TikTok Live Room Information\n     * @param {string} uniqueId The unique identifier for the TikTok user or room\n     * @param {boolean} [giftInfo] Optional flag to include gift information in the response\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebcastApi\n     */\n    public retrieveRoomInfo(uniqueId: string, giftInfo?: boolean, options?: RawAxiosRequestConfig) {\n        return WebcastApiFp(this.configuration).retrieveRoomInfo(uniqueId, giftInfo, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Fetch TikTok LIVE Stream video given a uniqueId.\n     * @param {string} uniqueId The unique ID of the TikTok to fetch the data for.\n     * @param {StreamType} [streamType] The type of video stream to fetch. Default is HLS_SD.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebcastApi\n     */\n    public retrieveRoomVideo(uniqueId: string, streamType?: StreamType, options?: RawAxiosRequestConfig) {\n        return WebcastApiFp(this.configuration).retrieveRoomVideo(uniqueId, streamType, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Send a chat to a TikTok LIVE room.\n     * @param {IWebcastRoomChatPayload} iWebcastRoomChatPayload The payload configuration for sending a chat\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebcastApi\n     */\n    public sendRoomChat(iWebcastRoomChatPayload: IWebcastRoomChatPayload, options?: RawAxiosRequestConfig) {\n        return WebcastApiFp(this.configuration).sendRoomChat(iWebcastRoomChatPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {ISignTikTokUrlBody} iSignTikTokUrlBody \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebcastApi\n     */\n    public signWebcastUrl(iSignTikTokUrlBody: ISignTikTokUrlBody, options?: RawAxiosRequestConfig) {\n        return WebcastApiFp(this.configuration).signWebcastUrl(iSignTikTokUrlBody, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n"]}