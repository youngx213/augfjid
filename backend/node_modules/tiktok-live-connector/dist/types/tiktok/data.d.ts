import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AgreeStatus, AuditStatus, BattleInviteType, BattleType, CohostABTestType, CohostLayoutMode, ContentInviteSource, ContentPositionType, ContentSource, EmotePrivateType, EmoteScene, EmoteType, GroupStatus, GuestMicCameraChangeScene, GuestMicCameraManageOp, HashtagNamespace, JoinType, KickoutReason, LinkmicApplierSortSetting, LinkmicMultiLiveEnum, LinkmicRoleType, LinkmicShareRevenueSetting, LinkmicStatus, LinkMicUserAdminType, LinkRoleType, LinkSilenceStatus, LinkType, LinkUserType, MultiGuestOutsideRoomInviteSource, MuteStatus, OptPairStatus, PerceptionDialogIconType, PlayScene, PollEndType, PosIdentityType, PunishTypeId, ReplyStatus, RewardCondition, Scene, SourceType, TagClassification, TagType, TextType, TopicActionType, UserEmoteUploadSource, UserMetricsType } from "./enums";
export declare const protobufPackage = "";
/** @Common */
export interface CommonMessageData {
    method: string;
    msgId: string;
    roomId: string;
    createTime: string;
    monitor: number;
    isShowMsg: boolean;
    describe: string;
    displayText: Text | undefined;
    foldType: string;
    anchorFoldType: string;
    priorityScore: string;
    logId: string;
    msgProcessFilterK: string;
    msgProcessFilterV: string;
    fromIdc: string;
    toIdc: string;
    filterMsgTagsList: string[];
    sei: CommonMessageData_LiveMessageSEI | undefined;
    dependRootId: CommonMessageData_LiveMessageID | undefined;
    dependId: CommonMessageData_LiveMessageID | undefined;
    anchorPriorityScore: string;
    roomMessageHeatLevel: string;
    foldTypeForWeb: string;
    anchorFoldTypeForWeb: string;
    clientSendTime: string;
    /** Enum */
    dispatchStrategy: CommonMessageData_IMDispatchStrategy;
}
export declare enum CommonMessageData_IMDispatchStrategy {
    IM_DISPATCH_STRATEGY_DEFAULT = 0,
    IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE = 1,
    UNRECOGNIZED = -1
}
export interface CommonMessageData_LiveMessageSEI {
    uniqueId: CommonMessageData_LiveMessageID | undefined;
    timestamp: string;
}
export interface CommonMessageData_LiveMessageID {
    primaryId: string;
    messageScene: string;
}
/** @Text */
export interface Text {
    displayType: string;
    defaultPattern: string;
    defaultFormat: Text_TextFormat | undefined;
    piecesList: Text_TextPiece[];
}
export declare enum Text_ShowType {
    SHOW_TYPE_NORMAL = 0,
    SHOW_TYPE_FADE_IN_OUT = 1,
    UNRECOGNIZED = -1
}
export interface Text_TextPiece {
    type: number;
    format: Text_TextFormat | undefined;
    stringValue: string;
    userValue?: Text_TextPieceUser | undefined;
    giftValue?: Text_TextPieceGift | undefined;
    patternRefValue: Text_TextPiecePatternRef | undefined;
}
export interface Text_TextFormat {
    color: string;
    bold: boolean;
    italic: boolean;
    weight: number;
    italicAngle: number;
    fontSize: number;
    useHeighLightColor: boolean;
    useRemoteClor: boolean;
}
export interface Text_TextPieceGift {
    giftId: number;
    nameRef: Text_PatternRef | undefined;
    /** Enum */
    showType: Text_ShowType;
    colorId: string;
}
export interface Text_TextPiecePatternRef {
    key: string;
    defaultPattern: string;
}
export interface Text_TextPieceUser {
    user: User | undefined;
    withColon: boolean;
}
export interface Text_PatternRef {
    key: string;
    defaultPattern: string;
}
/** @Image */
export interface Image {
    url: string[];
    mUri: string;
    height: number;
    width: number;
    avgColor: string;
    imageType: number;
    schema: string;
    content: Image_Content | undefined;
    isAnimated: boolean;
}
export interface Image_Content {
    name: string;
    fontColor: string;
    level: string;
}
/** @Badge */
export interface BadgeStruct {
    /** Enum */
    badgeDisplayType: BadgeStruct_BadgeDisplayType;
    badgePriorityType: BadgeStruct_BadgePriorityType;
    badgeScene: BadgeStruct_BadgeSceneType;
    position: BadgeStruct_Position;
    displayStatus: BadgeStruct_DisplayStatus;
    greyedByClient: string;
    exhibitionType: BadgeStruct_BadgeExhibitionType;
    schemaUrl: string;
    display: boolean;
    logExtra: PrivilegeLogExtra | undefined;
    image?: BadgeStruct_ImageBadge | undefined;
    text?: BadgeStruct_TextBadge | undefined;
    str?: BadgeStruct_StringBadge | undefined;
    combine?: BadgeStruct_CombineBadge | undefined;
    isCustomized: boolean;
}
export declare enum BadgeStruct_BadgeDisplayType {
    BADGEDISPLAYTYPE_UNKNOWN = 0,
    BADGEDISPLAYTYPE_IMAGE = 1,
    BADGEDISPLAYTYPE_TEXT = 2,
    BADGEDISPLAYTYPE_STRING = 3,
    BADGEDISPLAYTYPE_COMBINE = 4,
    UNRECOGNIZED = -1
}
export declare enum BadgeStruct_BadgePriorityType {
    BADGE_PRIORITY_TYPE_UNKNOWN = 0,
    BADGE_PRIORITY_TYPE_STRONG_RELATION = 10,
    BADGE_PRIORITY_TYPE_PLATFORM = 20,
    BADGE_PRIORITY_TYPE_RELATION = 30,
    BADGE_PRIORITY_TYPE_ACTIVITY = 40,
    BADGE_PRIORITY_TYPE_RANK_LIST = 50,
    UNRECOGNIZED = -1
}
export declare enum BadgeStruct_BadgeSceneType {
    BADGE_SCENE_TYPE_UNKNOWN = 0,
    BADGE_SCENE_TYPE_ADMIN = 1,
    BADGE_SCENE_TYPE_FIRST_RECHARGE = 2,
    BADGE_SCENE_TYPE_FRIENDS = 3,
    BADGE_SCENE_TYPE_SUBSCRIBER = 4,
    BADGE_SCENE_TYPE_ACTIVITY = 5,
    BADGE_SCENE_TYPE_RANK_LIST = 6,
    BADGE_SCENE_TYPE_NEW_SUBSCRIBER = 7,
    BADGE_SCENE_TYPE_USER_GRADE = 8,
    BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA = 9,
    BADGE_SCENE_TYPE_FANS = 10,
    BADGE_SCENE_TYPE_LIVE_PRO = 11,
    BADGE_SCENE_TYPE_ANCHOR = 12,
    UNRECOGNIZED = -1
}
export declare enum BadgeStruct_DisplayStatus {
    DISPLAY_STATUS_NORMAL = 0,
    DISPLAY_STATUS_SHADOW = 1,
    UNRECOGNIZED = -1
}
export declare enum BadgeStruct_BadgeExhibitionType {
    BADGE_EXHIBITION_TYPE_BADGE = 0,
    BADGE_EXHIBITION_TYPE_IDENTITY_LABEL = 1,
    UNRECOGNIZED = -1
}
export declare enum BadgeStruct_Position {
    POSITIONUNKNOWN = 0,
    POSITIONLEFT = 1,
    POSITIONRIGHT = 2,
    UNRECOGNIZED = -1
}
export declare enum BadgeStruct_HorizontalPaddingRule {
    HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH = 0,
    HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT = 1,
    UNRECOGNIZED = -1
}
export declare enum BadgeStruct_VerticalPaddingRule {
    VERTICAL_PADDING_RULE_USE_DEFAULT = 0,
    VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM = 1,
    UNRECOGNIZED = -1
}
export interface BadgeStruct_CombineBadge {
    badgeDisplayType: number;
    icon: Image | undefined;
    text: BadgeStruct_TextBadge | undefined;
    str: string;
    padding: BadgeStruct_PaddingInfo | undefined;
    fontStyle: FontStyle | undefined;
    profileCardPanel: BadgeStruct_ProfileCardPanel | undefined;
    background: BadgeStruct_CombineBadgeBackground | undefined;
    backgroundDarkMode: BadgeStruct_CombineBadgeBackground | undefined;
    iconAutoMirrored: boolean;
    bgAutoMirrored: boolean;
    publicScreenShowStyle: number;
    personalCardShowStyle: number;
    rankListOnlineAudienceShowStyle: number;
    multiGuestShowStyle: number;
    arrowConfig: BadgeStruct_ArrowConfig | undefined;
    paddingNewFont: BadgeStruct_PaddingInfo | undefined;
}
export interface BadgeStruct_ArrowConfig {
    icon: Image | undefined;
}
export interface BadgeStruct_ProfileContent {
    useContent: boolean;
    iconList: BadgeStruct_IconConfig[];
    numberConfig: BadgeStruct_NumberConfig | undefined;
}
export interface BadgeStruct_ProjectionConfig {
    useProjection: boolean;
    icon: Image | undefined;
}
export interface BadgeStruct_NumberConfig {
    number: string;
    fontStyle: FontStyle | undefined;
    background: BadgeStruct_CombineBadgeBackground | undefined;
}
export interface BadgeStruct_ProfileCardPanel {
    useNewProfileCardStyle: boolean;
    /** BadgeTextPosition badgeTextPosition = 2; // Enum */
    projectionConfig: BadgeStruct_ProjectionConfig | undefined;
    profileContent: BadgeStruct_ProfileContent | undefined;
}
export interface BadgeStruct_CombineBadgeBackground {
    image: Image | undefined;
    backgroundColorCode: string;
    borderColorCode: string;
}
export interface BadgeStruct_ImageBadge {
    badgeDisplayType: BadgeStruct_BadgeDisplayType;
    image: Image | undefined;
}
export interface BadgeStruct_TextBadge {
    badgeDisplayType: BadgeStruct_BadgeDisplayType;
    key: string;
    defaultPattern: string;
    pieces: string[];
}
export interface BadgeStruct_IconConfig {
    icon: Image | undefined;
    background: BadgeStruct_CombineBadgeBackground | undefined;
}
export interface BadgeStruct_StringBadge {
    badgeDisplayType: BadgeStruct_BadgeDisplayType;
    str: string;
}
export interface BadgeStruct_PaddingInfo {
    useSpecific: boolean;
    middlePadding: number;
    badgeWidth: number;
    leftPadding: number;
    rightPadding: number;
    iconTopPadding: number;
    iconBottomPadding: number;
    horizontalPaddingRule: BadgeStruct_HorizontalPaddingRule;
    verticalPaddingRule: BadgeStruct_VerticalPaddingRule;
}
/** @Gift */
export interface Gift {
    giftImage: Image | undefined;
    describe: string;
    duration: number;
    id: string;
    forLinkMic: boolean;
    combo: boolean;
    giftType: number;
    diamondCount: number;
    isDisplayedOnPanel: boolean;
    primaryEffectId: string;
    giftLabelIcon: Image | undefined;
    giftName: string;
    icon: Image | undefined;
    goldEffect: string;
    previewImage: Image | undefined;
    giftPanelBanner: Gift_GiftPanelBanner | undefined;
    isBroadcastGift: boolean;
    isEffectBefview: boolean;
    isRandomGift: boolean;
    isBoxGift: boolean;
    canPutInGiftBox: boolean;
    giftBoxInfo: Gift_GiftBoxInfo | undefined;
}
export interface Gift_GiftPanelBanner {
    displayText: Text | undefined;
    leftIcon: Image | undefined;
    schemaUrl: string;
    bgColors: string[];
    bannerLynxUrl: string;
    bannerPriority: number;
    bannerLynxExtra: string;
    bgImage: Image | undefined;
}
export interface Gift_BatchGiftInfo {
    canBatchSend: boolean;
    availableCounts: string[];
}
export interface Gift_CrossScreenEffectInfo {
    singleActionEffectIds: {
        [key: string]: number;
    };
    actionEffectIds: {
        [key: string]: number;
    };
    reactionEffectIds: {
        [key: string]: number;
    };
}
export interface Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry {
    key: string;
    value: number;
}
export interface Gift_CrossScreenEffectInfo_ActionEffectIdsEntry {
    key: string;
    value: number;
}
export interface Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry {
    key: string;
    value: number;
}
export interface Gift_GiftSponsorInfo {
    sponsorId: string;
    sponsorCount: string;
    currentCount: string;
    leftCountToSponsor: string;
    canSponsor: boolean;
}
export interface Gift_UGGiftStructInfo {
    isUgGift: boolean;
    ugPointsCost: string;
}
export interface Gift_GiftSkin {
    giftSkinId: string;
    giftSkinName: string;
    staticImage: Image | undefined;
    animatedImage: Image | undefined;
}
export interface Gift_GiftText {
    giftTextId: string;
    giftTextName: string;
}
export interface Gift_GiftSkinToGiftTextsInfo {
    giftSkinId: string;
    giftTextIds: string[];
}
export interface Gift_GiftBoxInfo {
    capacity: string;
    isPrimaryBox: boolean;
    schemeUrl: string;
}
/** @User */
export interface User {
    userId: string;
    nickname: string;
    bioDescription: string;
    profilePicture: Image | undefined;
    profilePictureMedium: Image | undefined;
    profilePictureLarge: Image | undefined;
    verified: boolean;
    status: number;
    createTime: string;
    modifyTime: string;
    secret: number;
    shareQrcodeUri: string;
    badgeImageList: Image[];
    followInfo: User_FollowInfo | undefined;
    userHonor: UserHonor | undefined;
    fansClub: FansClubMember | undefined;
    border: BorderInfo | undefined;
    specialId: string;
    avatarBorder: Image | undefined;
    medal: Image | undefined;
    userBadges: Image[];
    newUserBadges: Image[];
    topVipNo: number;
    userAttr: User_UserAttr | undefined;
    ownRoom: User_OwnRoom | undefined;
    payScore: string;
    fanTicketCount: string;
    anchorInfo: User_AnchorLevel | undefined;
    linkMicStats: LinkmicStatus;
    uniqueId: string;
    enableShowCommerceSale: boolean;
    withFusionShopEntry: boolean;
    payScores: string;
    anchorLevel: User_AnchorLevel | undefined;
    verifiedContent: string;
    authorInfo: Author | undefined;
    topFans: User[];
    secUid: string;
    userRole: number;
    rewardInfo: User_ActivityInfo | undefined;
    personalCard: Image | undefined;
    authenticationInfo: User_AuthenticationInfo | undefined;
    mediaBadgeImageList: Image[];
    commerceWebcastConfigIds: string[];
    borders: BorderInfo[];
    comboBadgeInfo: User_ComboBadgeInfo | undefined;
    subscribeInfo: User_SubscribeInfo | undefined;
    badges: BadgeStruct[];
    mintTypeLabel: string[];
    fansClubInfo: User_FansClubInfo | undefined;
    allowFindByContacts: boolean;
    allowOthersDownloadVideo: boolean;
    allowOthersDownloadWhenSharingVideo: boolean;
    allowShareShowProfile: boolean;
    allowShowInGossip: boolean;
    allowShowMyAction: boolean;
    allowStrangeComment: boolean;
    allowUnfollowerComment: boolean;
    allowUseLinkmic: boolean;
    avatarJpg: Image | undefined;
    backgroundImgUrl: string;
    blockStatus: number;
    commentRestrict: number;
    constellation: string;
    disableIchat: number;
    enableIchatImg: string;
    exp: number;
    foldStrangerChat: boolean;
    followStatus: string;
    ichatRestrictType: number;
    idStr: string;
    isFollower: boolean;
    isFollowing: boolean;
    needProfileGuide: boolean;
    pushCommentStatus: boolean;
    pushDigg: boolean;
    pushFollow: boolean;
    pushFriendAction: boolean;
    pushIchat: boolean;
    pushStatus: boolean;
    pushVideoPost: boolean;
    pushVideoRecommend: boolean;
    verifiedReason: string;
    enableCarManagementPermission: boolean;
    upcomingEventList: User_LiveEventInfo[];
    scmLabel: string;
    ecommerceEntrance: User_EcommerceEntrance | undefined;
    isBlock: boolean;
    isSubscribe: boolean;
    isAnchorMarked: boolean;
}
export interface User_LiveEventInfo {
    eventId: string;
    startTime: string;
    duration: string;
    title: string;
    description: string;
    hasSubscribed: boolean;
    isPaidEvent: boolean;
    ticketAmount: string;
    /** @warning Enum not found, should be PayMethod */
    payMethod: string;
}
/**
 * @EventPayMethod
 * webcast.data.LiveEventInfo
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export declare enum User_LiveEventInfo_EventPayMethod {
    EVENTPAYMETHODINVALID = 0,
    EVENTPAYMETHODCOINS = 1,
    EVENTPAYMETHODCASH = 2,
    UNRECOGNIZED = -1
}
/**
 * @WalletPackage
 * proto.webcast.data.LiveEventInfo
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_LiveEventInfo_WalletPackage {
    iapId: string;
    usdPriceShow: string;
}
/**
 * @ActivityInfo
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_ActivityInfo {
    badge: Image | undefined;
    storytag: Image | undefined;
}
/**
 * @AnchorLevel
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_AnchorLevel {
    level: string;
    experience: string;
    lowestExperienceThisLevel: string;
    highestExperienceThisLevel: string;
    taskStartExperience: string;
    taskStartTime: string;
    taskDecreaseExperience: string;
    taskTargetExperience: string;
    taskEndTime: string;
    profileDialogBg: Image | undefined;
    profileDialogBgBack: Image | undefined;
    stageLevel: Image | undefined;
    smallIcon: Image | undefined;
}
/**
 * @AuthenticationInfo
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_AuthenticationInfo {
    customVerify: string;
    enterpriseVerifyReason: string;
    authenticationBadge: Image | undefined;
}
/**
 * @AuthorStats
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_AuthorStats {
    videoTotalCount: string;
    videoTotalPlayCount: string;
    videoTotalShareCount: string;
    videoTotalSeriesCount: string;
    varietyShowPlayCount: string;
    videoTotalFavoriteCount: string;
}
/**
 * @Border
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_Border {
    icon: Image | undefined;
    level: string;
    source: string;
    profileDecorationRibbon: Image | undefined;
    avatarBackgroundColor: string;
    avatarBackgroundBorderColor: string;
}
/**
 * @ComboBadgeInfo
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_ComboBadgeInfo {
    icon: Image | undefined;
    comboCount: string;
}
/**
 * @EcommerceEntrance
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_EcommerceEntrance {
    /** Enum */
    entranceType: User_EcommerceEntrance_EntranceType;
    /** Enum */
    creatorType: User_EcommerceEntrance_CreatorType;
    schema: string;
    shopEntranceInfo: User_EcommerceEntrance_ShopEntranceInfo | undefined;
    showcaseEntranceInfo: User_EcommerceEntrance_ShowcaseEntranceInfo | undefined;
}
/**
 * @CreatorType
 * webcast.data.User.EcommerceEntrance
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export declare enum User_EcommerceEntrance_CreatorType {
    UNDEFINED = 0,
    OFFICIAL = 1,
    MARKET = 2,
    NORMAL = 3,
    UNRECOGNIZED = -1
}
/**
 * @EntranceType
 * webcast.data.User.EcommerceEntrance
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export declare enum User_EcommerceEntrance_EntranceType {
    PROFILE = 0,
    SHOWCASE = 1,
    SHOP = 2,
    UNRECOGNIZED = -1
}
/**
 * @ShopEntranceInfo
 * proto.webcast.data.User.EcommerceEntrance
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_EcommerceEntrance_ShopEntranceInfo {
    shopId: string;
    shopName: string;
    shopRating: string;
    storeLabel: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel | undefined;
    formatSoldCount: string;
    soldCount: string;
    expRatePercentile: number;
    expRateTopDisplay: string;
    rateDisplayStyle: number;
    showRateNotApplicable: boolean;
}
/**
 * @StoreLabel
 * proto.webcast.data.User.EcommerceEntrance.ShopEntranceInfo
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_EcommerceEntrance_ShopEntranceInfo_StoreLabel {
    officialLabel: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel | undefined;
    isBytemall: boolean;
}
/**
 * @StoreBrandLabelType
 * webcast.data.User.EcommerceEntrance.ShopEntranceInfo.StoreLabel
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export declare enum User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType {
    NONE = 0,
    OFFICIAL = 1,
    AUTHORIZED = 2,
    STORE_BRAND_LABEL_TYPE_BLUE_V = 3,
    STORE_BRAND_LABEL_TYPE_TOP_CHOICE = 4,
    UNRECOGNIZED = -1
}
/**
 * @StoreOfficialLabel
 * proto.webcast.data.User.EcommerceEntrance.ShopEntranceInfo.StoreLabel
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel {
    labelImageLight: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage | undefined;
    labelImageDark: User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage | undefined;
    /** @warning Enum not found, should be LabelType */
    labelType: string;
    labelTypeStr: string;
}
/**
 * @ShopLabelImage
 * proto.webcast.data.User.EcommerceEntrance.ShopEntranceInfo.StoreLabel.StoreOfficialLabel
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage {
    height: number;
    width: number;
    minetype: string;
    thumbUri: string;
    thumbUriList: string[];
    uri: string;
    urlList: string[];
    color: string;
}
/**
 * @ShowcaseEntranceInfo
 * proto.webcast.data.User.EcommerceEntrance
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_EcommerceEntrance_ShowcaseEntranceInfo {
    formatSoldCount: string;
    soldCount: string;
}
/**
 * @FansClub
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_FansClub {
    data: User_FansClub_FansClubData | undefined;
}
/**
 * @PreferntialType
 * webcast.data.User.FansClub
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export declare enum User_FansClub_PreferntialType {
    PRESONALPROFILE = 0,
    OTHERROOM = 1,
    UNRECOGNIZED = -1
}
/**
 * @FansClubData
 * proto.webcast.data.User.FansClub
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_FansClub_FansClubData {
    clubName: string;
    level: number;
    /** Enum */
    userFansClubStatus: User_FansClub_FansClubData_UserFansClubStatus;
    availableGiftIdsList: string[];
    anchorId: string;
}
/**
 * @BadgeIcon
 * webcast.data.User.FansClub.FansClubData
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export declare enum User_FansClub_FansClubData_BadgeIcon {
    UNKNOWN = 0,
    ICON = 1,
    SMALLICON = 2,
    UNRECOGNIZED = -1
}
/**
 * @UserFansClubStatus
 * webcast.data.User.FansClub.FansClubData
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export declare enum User_FansClub_FansClubData_UserFansClubStatus {
    NOTJOINED = 0,
    ACTIVE = 1,
    INACTIVE = 2,
    UNRECOGNIZED = -1
}
/**
 * @FansClubInfo
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_FansClubInfo {
    isSleeping: boolean;
    fansLevel: string;
    fansScore: string;
    badge: Image | undefined;
    fansCount: string;
    fansClubName: string;
}
/**
 * @FollowInfo
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_FollowInfo {
    followingCount: string;
    followerCount: string;
    followStatus: string;
    pushStatus: string;
}
/**
 * @OwnRoom
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_OwnRoom {
    roomIdsList: string[];
    roomIdsStrList: string[];
}
/**
 * @PayGrade
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_PayGrade {
    diamondIcon: Image | undefined;
    name: string;
    icon: Image | undefined;
    nextName: string;
    level: string;
    nextIcon: Image | undefined;
    gradeDescribe: string;
    gradeIconList: GradeIcon[];
    screenChatType: string;
    imIcon: Image | undefined;
    imIconWithLevel: Image | undefined;
    liveIcon: Image | undefined;
    newImIconWithLevel: Image | undefined;
    newLiveIcon: Image | undefined;
    upgradeNeedConsume: string;
    nextPrivileges: string;
    background: Image | undefined;
    backgroundBack: Image | undefined;
    score: string;
    gradeBanner: string;
    profileDialogBg: Image | undefined;
    profileDialogBgBack: Image | undefined;
}
/**
 * @SubscribeBadge
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_SubscribeBadge {
    originImg: Image | undefined;
    previewImg: Image | undefined;
}
/**
 * @SubscribeInfo
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_SubscribeInfo {
    qualification: boolean;
    isSubscribe: boolean;
    badge: User_SubscribeBadge | undefined;
    enableSubscription: boolean;
    subscriberCount: string;
    isInGracePeriod: boolean;
    isSubscribedToAnchor: boolean;
    userGiftSubAuth: boolean;
    anchorGiftSubAuth: boolean;
}
/**
 * @UserAttr
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_UserAttr {
    isMuted: boolean;
    isAdmin: boolean;
    isSuperAdmin: boolean;
    muteDuration: string;
}
/**
 * @UserStats
 * proto.webcast.data.User
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface User_UserStats {
    id: string;
    idStr: string;
    followingCount: string;
    followerCount: string;
    recordCount: string;
    totalDuration: string;
    dailyFanTicketCount: string;
    dailyIncome: string;
    itemCount: string;
    favoriteItemCount: string;
    diamondConsumedCount: string;
    tuwenItemCount: string;
}
/** @Emote */
export interface Emote {
    emoteId: string;
    image: Image | undefined;
    /** Enum */
    auditStatus: AuditStatus;
    uuid: string;
    /** Enum */
    emoteType: EmoteType;
    /** Enum */
    contentSource: ContentSource;
    /** Enum */
    emotePrivateType: EmotePrivateType;
    packageId: string;
    auditInfo: Emote_AuditInfo | undefined;
    rewardCondition: RewardCondition;
    emoteUploadInfo: Emote_EmoteUploadInfo | undefined;
    createTime: string;
    emoteScene: EmoteScene;
}
export interface Emote_AuditInfo {
    violationId: string;
    taskType: Emote_AuditInfo_AuditTaskType;
}
export declare enum Emote_AuditInfo_AuditTaskType {
    AUDIT_TASK_TYPE_DEFAULT = 0,
    AUDIT_TASK_TYPE_APPEAL = 1,
    UNRECOGNIZED = -1
}
export interface Emote_EmoteUploadInfo {
    userId: string;
    emoteUploadSource: UserEmoteUploadSource;
    userInfo: User | undefined;
    userIdStr: string;
}
/** @PunishEventInfo */
export interface PunishEventInfo {
    punishType: string;
    punishReason: string;
    punishId: string;
    violationUid: string;
    /** Enum */
    punishTypeId: PunishTypeId;
    duration: string;
    punishPerceptionCode: string;
    violationUidStr: string;
    showReason: string;
}
/** @MsgFilter */
export interface MsgFilter {
    isGifter: boolean;
    isSubscribedToAnchor: boolean;
}
/**
 * @UserIdentity
 * proto.webcast.data
 */
export interface UserIdentity {
    isGiftGiverOfAnchor: boolean;
    isSubscriberOfAnchor: boolean;
    isMutualFollowingWithAnchor: boolean;
    isFollowerOfAnchor: boolean;
    isModeratorOfAnchor: boolean;
    isAnchor: boolean;
}
/**
 * @Goal
 * proto.webcast.data
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface LiveStreamGoal {
    id: string;
    type: number;
    status: number;
    subGoals: LiveStreamGoal_LiveStreamSubGoal[];
    description: string;
    auditStatus: AuditStatus;
    cycleType: number;
    startTime: string;
    expireTime: string;
    realFinishTime: string;
    contributors: LiveStreamGoal_LiveStreamGoalContributor[];
    contributorsLength: number;
    idStr: string;
    auditDescription: string;
    stats: LiveStreamGoal_GoalStats | undefined;
    goalExtraInfo: string;
    mode: number;
    auditInfo: LiveStreamGoal_AuditInfo | undefined;
    challengeType: string;
    isUneditable: boolean;
}
export interface LiveStreamGoal_AuditInfo {
    violationId: string;
    taskType: number;
}
export interface LiveStreamGoal_LiveStreamSubGoal {
    type: number;
    id: string;
    progress: string;
    target: string;
    gift: LiveStreamGoal_LiveStreamSubGoalGift | undefined;
    idStr: string;
    pinInfo: LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo | undefined;
    source: number;
    recommendedText: string;
    recommendedHeader: string;
}
export interface LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo {
    pinStartTime: string;
    pinEndTime: string;
    pinReadyTime: string;
}
export interface LiveStreamGoal_LiveStreamSubGoalGift {
    name: string;
    icon: Image | undefined;
    diamondCount: string;
    type: number;
}
export interface LiveStreamGoal_LiveStreamGoalContributor {
    userId: string;
    avatar: Image | undefined;
    displayId: string;
    score: string;
    userIdStr: string;
    inRoom: boolean;
    isFriend: boolean;
    followByOwner: boolean;
    isFistContribute: boolean;
    subGoalContributions: LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution[];
}
export interface LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution {
    id: string;
    contributionCount: string;
}
export interface LiveStreamGoal_GoalStats {
    totalCoins: string;
    totalContributor: string;
    comparison: LiveStreamGoal_GoalStats_GoalComparison | undefined;
    totalNewFans: string;
}
export interface LiveStreamGoal_GoalStats_GoalComparison {
    coinsIncr: string;
    contributorIncr: string;
}
/**
 * @Indicator
 * proto.webcast.data
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface LiveStreamGoalIndicator {
    key: string;
    op: number;
}
export interface Ranking {
    type: string;
    label: string;
    color: TikTokColor | undefined;
    details: ValueLabel[];
}
export interface TikTokColor {
    color: string;
    id: string;
    data1: number;
}
export interface ValueLabel {
    data: number;
    label: string;
    label2: string;
    label3: string;
}
export interface TimeStampContainer {
    timestamp1: string;
    timestamp2: string;
    timestamp3: string;
}
export interface PollStartContent {
    StartTime: string;
    EndTime: string;
    OptionList: PollOptionInfo[];
    Title: string;
    Operator: User | undefined;
}
export interface PollEndContent {
    EndType: PollEndType;
    OptionList: PollOptionInfo[];
    Operator: User | undefined;
}
export interface PollOptionInfo {
    Votes: number;
    DisplayContent: string;
    OptionIdx: number;
    VoteUserList: VoteUser[];
}
export interface VoteUser {
    UserId: string;
    NickName: string;
    AvatarThumb: Image | undefined;
}
export interface PollUpdateVotesContent {
    OptionList: PollOptionInfo[];
}
export interface UserFanTicket {
    UserId: string;
    FanTicket: string;
    MatchTotalScore: string;
    MatchRank: number;
}
export interface FanTicketRoomNoticeContent {
    UserFanTicketList: UserFanTicket[];
    TotalLinkMicFanTicket: string;
    MatchId: string;
    EventTime: string;
    FanTicketIconUrl: string;
    playId: string;
    playScene: PlayScene;
}
export interface LinkerAcceptNoticeContent {
    fromUserId: string;
    fromRoomId: string;
    toUserId: string;
}
export interface LinkerCancelContent {
    fromUserId: string;
    toUserId: string;
    cancelType: string;
    actionId: string;
}
export interface ListUser {
    user: User | undefined;
    linkmicId: string;
    linkmicIdStr: string;
    linkStatus: LinkmicRoleType;
    linkType: LinkType;
    userPosition: number;
    silenceStatus: LinkSilenceStatus;
    modifyTime: string;
    linkerId: string;
    roleType: LinkRoleType;
}
/** it is just empty */
export interface LinkerCloseContent {
}
export interface LinkerCreateContent {
    ownerId: string;
    ownerRoomId: string;
    /** Assuming this is LinkType enum */
    linkType: string;
}
export interface LinkerEnterContent {
    linkedUsersList: ListUser[];
    anchorMultiLiveEnum: LinkmicMultiLiveEnum;
    anchorSettingInfo: MultiLiveAnchorPanelSettings | undefined;
}
export interface LinkerInviteContent {
    fromUserId: string;
    fromRoomId: string;
    toRtcExtInfo: string;
    rtcJoinChannel: boolean;
    vendor: string;
    secFromUserId: string;
    toLinkmicIdStr: string;
    fromUser: User | undefined;
    requiredMicIdx: string;
    rtcExtInfoMap: {
        [key: string]: string;
    };
    multiLiveLayoutEnable: LinkmicMultiLiveEnum;
    multiLiveSetting: MultiLiveAnchorPanelSettings | undefined;
    fromLinkmicIdStr: string;
    fromTopHostInfo: LinkerInviteContent_InviteTopHostInfo | undefined;
    actionId: string;
    linkedUsers: LinkerInviteContent_LinkmicUserInfo[];
    dialogInfo: LinkerInviteContent_PerceptionDialogInfo | undefined;
    punishEventInfo: PunishEventInfo | undefined;
    fromRoomAgeRestricted: number;
    abTestSetting: LinkerInviteContent_CohostABTestSetting[];
    linkerInviteMsgExtra: LinkerInviteContent_LinkerInviteMessageExtra | undefined;
}
export interface LinkerInviteContent_RtcExtInfoMapEntry {
    key: string;
    value: string;
}
export interface LinkerInviteContent_InviteTopHostInfo {
    rankType: string;
    topIndex: string;
}
export interface LinkerInviteContent_LinkmicUserInfo {
    userId: string;
    linkmicIdStr: string;
    roomId: string;
    linkedTime: string;
}
export interface LinkerInviteContent_PerceptionDialogInfo {
    iconType: PerceptionDialogIconType;
    title: Text | undefined;
    subTitle: Text | undefined;
    adviceActionText: Text | undefined;
    defaultActionText: Text | undefined;
    violationDetailUrl: string;
    scene: Scene;
    targetUserId: string;
    targetRoomId: string;
    countDownTime: string;
    showFeedback: boolean;
    feedbackOptions: LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption[];
    policyTip: string;
    appealPopup: number;
}
export interface LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption {
    id: string;
    contentKey: string;
}
export interface LinkerInviteContent_CohostABTestSetting {
    key: string;
    value: LinkerInviteContent_CohostABTestSetting_CohostABTestList | undefined;
}
export interface LinkerInviteContent_CohostABTestSetting_CohostABTestList {
    abTestList: LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest[];
}
export interface LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest {
    abTestType: CohostABTestType;
    group: string;
}
export interface LinkerInviteContent_LinkerInviteMessageExtra {
    matchType: number;
    inviteType: number;
    subType: number;
    theme: string;
    duration: number;
    layout: number;
    tips: string;
    inviterRivalExtra: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra | undefined;
    otherRivalExtra: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra[];
    topicInfo: CohostTopic | undefined;
    algoRequestId: string;
}
export interface LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra {
    textType: TextType;
    text: string;
    label: string;
    userCount: number;
    avatarThumb: Image | undefined;
    displayId: string;
    authenticationInfo: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo | undefined;
    nickname: string;
    followStatus: string;
    mHashtag: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag | undefined;
    userId: string;
    isBestTeammate: boolean;
    optPairInfo: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo | undefined;
    followerCount: string;
}
export interface LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo {
    customVerify: string;
    enterpriseVerifyReason: string;
    authenticationBadge: Image | undefined;
}
export interface LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag {
    id: string;
    title: string;
    image: Image | undefined;
    namespace: HashtagNamespace;
}
export interface LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo {
    mappingId: string;
    displayUserList: LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser[];
    buttonNoticeType: OptPairStatus;
    expectedTimeSec: string;
    optPairType: string;
}
export interface LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser {
    user: User | undefined;
    roomId: string;
}
export interface CohostTopic {
    id: string;
    titleKey: string;
    titleText: string;
    liked: boolean;
    totalHeat: string;
    totalRivals: string;
    rivalsAvatar: Image[];
}
export interface LinkerKickOutContent {
    fromUserId: string;
    kickoutReason: KickoutReason;
}
export interface LinkerLeaveContent {
    userId: string;
    linkmicIdStr: string;
    sendLeaveUid: string;
    leaveReason: string;
}
/** Empty */
export interface LinkerLinkedListChangeContent {
}
/** Empty */
export interface CohostListChangeContent {
}
export interface LinkerListChangeContent {
    linkedUsers: ListUser[];
    appliedUsers: ListUser[];
    connectingUsers: ListUser[];
}
export interface LinkerMediaChangeContent {
    op: GuestMicCameraManageOp;
    toUserId: string;
    anchorId: string;
    roomId: string;
    changeScene: GuestMicCameraChangeScene;
    operatorInfo: LinkerMediaChangeContent_LinkerMediaChangeOperator | undefined;
}
export interface LinkerMediaChangeContent_LinkerMediaChangeOperator {
    userId: string;
    operatorType: LinkMicUserAdminType;
    nickName: string;
    displayId: string;
}
/** Empty */
export interface LinkerMicIdxUpdateContent {
}
export interface LinkerMuteContent {
    userId: string;
    status: MuteStatus;
}
export interface LinkerRandomMatchContent {
    user: User | undefined;
    roomId: string;
    inviteType: string;
    matchId: string;
    innerChannelId: string;
}
export interface LinkerReplyContent {
    fromUserId: string;
    fromRoomId: string;
    fromUserLinkmicInfo: LinkerReplyContent_LinkmicInfo | undefined;
    toUserId: string;
    toUserLinkmicInfo: LinkerReplyContent_LinkmicInfo | undefined;
    linkType: string;
    replyStatus: string;
    linkerSetting: LinkerSetting | undefined;
    fromUser: User | undefined;
    toUser: User | undefined;
}
export interface LinkerReplyContent_LinkmicInfo {
    accessKey: string;
    linkMicId: string;
    joinable: boolean;
    confluenceType: number;
    rtcExtInfo: string;
    rtcAppId: string;
    rtcAppSign: string;
    linkmicIdStr: string;
    vendor: string;
}
export interface LinkerSetting {
    MaxMemberLimit: string;
    LinkType: string;
    Scene: Scene;
    OwnerUserId: string;
    OwnerRoomId: string;
    Vendor: string;
}
export interface LinkerSysKickOutContent {
    userId: string;
    linkmicIdStr: string;
}
export interface LinkmicUserToastContent {
    userId: string;
    roomId: string;
    displayText: Text | undefined;
    leavedUserId: string;
}
export interface LinkerUpdateUserContent {
    fromUserId: string;
    toUserId: string;
    updateInfo: {
        [key: string]: string;
    };
}
export interface LinkerUpdateUserContent_UpdateInfoEntry {
    key: string;
    value: string;
}
export interface LinkerUpdateUserSettingContent {
    multiLiveAnchorPanelSettings: MultiLiveAnchorPanelSettings | undefined;
}
/** Empty */
export interface LinkerWaitingListChangeContent {
}
export interface MultiLiveAnchorPanelSettings {
    userId: string;
    layout: string;
    fixMicNum: string;
    allowRequestFromUser: string;
    allowRequestFromFollowerOnly: string;
    applierSortSetting: LinkmicApplierSortSetting;
    applierSortGiftScoreThreshold: string;
    allowRequestFromFriends: number;
    allowRequestFromFollowers: number;
    allowRequestFromOthers: number;
    enableShowMultiGuestLayout: number;
}
export interface Player {
    roomId: string;
    userId: string;
}
export interface AllListUser {
    linkedList: LinkLayerListUser[];
    appliedList: LinkLayerListUser[];
    invitedList: LinkLayerListUser[];
    readyList: LinkLayerListUser[];
}
export interface LinkLayerListUser {
    user: User | undefined;
    linkmicId: string;
    pos: Position | undefined;
    linkedTimeNano: string;
    appVersion: string;
    magicNumber1: string;
}
export interface Position {
    type: number;
    link: LinkPosition | undefined;
}
export interface LinkPosition {
    position: number;
    opt: number;
}
export interface GroupPlayer {
    channelId: string;
    user: User | undefined;
}
export interface DSLConfig {
    sceneVersion: number;
    layoutId: string;
}
export interface GroupChannelAllUser {
    groupChannelId: string;
    userList: GroupChannelUser[];
    contentVersion: string;
}
export interface GroupChannelUser {
    channelId: string;
    status: GroupStatus;
    type: TextType;
    allUser: AllListUser | undefined;
    joinTime: string;
    linkedTime: string;
    ownerUser: GroupPlayer | undefined;
    groupLinkmicId: string;
}
export interface RTCExtraInfo {
    liveRtcEngineConfig: RTCExtraInfo_RTCEngineConfig | undefined;
    liveRtcVideoParamList: RTCExtraInfo_RTCLiveVideoParam[];
    rtcBitrateMap: RTCExtraInfo_RTCBitrateMap | undefined;
    rtcFps: number;
    rtcMixBase: RTCExtraInfo_RTCMixBase | undefined;
    byteRtcExtInfo: RTCExtraInfo_ByteRTCExtInfo | undefined;
    rtcInfoExtra: RTCExtraInfo_RTCInfoExtra | undefined;
    rtcBusinessId: string;
    rtcOther: RTCExtraInfo_RTCOther | undefined;
    interactClientType: number;
}
export interface RTCExtraInfo_RTCMixBase {
    bitrate: number;
}
export interface RTCExtraInfo_ByteRTCExtInfo {
    defaultSignaling: number;
}
export interface RTCExtraInfo_RTCInfoExtra {
    version: string;
}
export interface RTCExtraInfo_RTCOther {
    transCodingSecond: number;
}
export interface RTCExtraInfo_RTCEngineConfig {
    rtcAppId: string;
    rtcUserId: string;
    rtcToken: string;
    rtcChannelId: string;
}
export interface RTCExtraInfo_RTCLiveVideoParam {
    strategyId: number;
    params: RTCExtraInfo_RTCVideoParam | undefined;
}
export interface RTCExtraInfo_RTCVideoParam {
    width: number;
    height: number;
    fps: number;
    bitrateKbps: number;
}
export interface RTCExtraInfo_RTCBitrateMap {
    xx1: number;
    xx2: number;
    xx3: number;
    xx4: number;
}
export interface CreateChannelContent {
    owner: Player | undefined;
    ownerLinkMicId: string;
}
export interface ListChangeContent {
    listChangeType: number;
    userList: AllListUser | undefined;
    linkedUserUiPositions: string[];
    contentPos: ContentPosition[];
}
export interface ContentPosition {
    contentID: string;
    contentType: ContentPositionType;
    pos: MicPositionData | undefined;
    contentLinkmicID: string;
    startTimeNano: string;
}
export interface MicPositionData {
    type: number;
    linkPosition: LinkPosition | undefined;
}
export interface MultiLiveContent {
    applyBizContent: MultiLiveContent_ApplyBizContent | undefined;
    inviteBizContent: MultiLiveContent_InviteBizContent | undefined;
    replyBizContent: MultiLiveContent_ReplyBizContent | undefined;
    permitBizContent: MultiLiveContent_PermitBizContent | undefined;
    joinDirectBizContent: MultiLiveContent_JoinDirectBizContent | undefined;
    kickOutBizContent: MultiLiveContent_KickOutBizContent | undefined;
}
export interface MultiLiveContent_ApplyBizContent {
    user: User | undefined;
}
export interface MultiLiveContent_JoinDirectBizContent {
    replyImMsgId: string;
    outsideRoomInviteSource: MultiGuestOutsideRoomInviteSource;
}
export interface MultiLiveContent_InviteBizContent {
    anchorSettingInfo: MultiLiveAnchorPanelSettings | undefined;
    inviteSource: ContentInviteSource;
    operatorUserInfo: User | undefined;
    operatorLinkAdminType: LinkMicUserAdminType;
    inviteeUserInfo: User | undefined;
    shareRevenueSetting: LinkmicShareRevenueSetting;
}
export interface MultiLiveContent_ReplyBizContent {
    linkType: number;
    isTurnOffInvitation: number;
    replyUserInfo: User | undefined;
}
export interface MultiLiveContent_PermitBizContent {
    anchorSettingInfo: MultiLiveAnchorPanelSettings | undefined;
    expireTimestamp: string;
    operatorUserInfo: User | undefined;
    operatorLinkAdminType: LinkMicUserAdminType;
    linkUserType: LinkUserType;
}
export interface MultiLiveContent_KickOutBizContent {
    operatorUserInfo: User | undefined;
    operatorLinkAdminType: LinkMicUserAdminType;
    kickPlayerUserInfo: User | undefined;
}
export interface InviteContent {
    invitor: Player | undefined;
    inviteeRtcExtInfo: RTCExtraInfo | undefined;
    invitorLinkMicId: string;
    inviteeLinkMicId: string;
    isOwner: boolean;
    pos: Position | undefined;
    dsl: DSLConfig | undefined;
    invitee: User | undefined;
    operator: User | undefined;
}
/**
 * @ApplyContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface ApplyContent {
    applier: Player | undefined;
    applierLinkMicId: string;
}
/**
 * @PermitApplyContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface PermitApplyContent {
    permiter: Player | undefined;
    permiterLinkMicId: string;
    applierPos: Position | undefined;
    /** Enum */
    replyStatus: ReplyStatus;
    dsl: DSLConfig | undefined;
    applier: User | undefined;
    operator: User | undefined;
    applierLinkMicId: string;
}
/**
 * @ReplyInviteContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface ReplyInviteContent {
    invitee: Player | undefined;
    replyStatus: ReplyStatus;
    inviteeLinkMicId: string;
    inviteePos: Position | undefined;
    inviteOperatorUser: Player | undefined;
    linkedUserUiPositions: string[];
    uiPos: PosIdentity[];
}
/**
 * @KickOutContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface KickOutContent {
    offliner: Player | undefined;
    kickoutReason: KickoutReason;
    linkedUserUiPositions: string[];
    uiPos: PosIdentity[];
}
export interface PosIdentity {
    type: PosIdentityType;
    value: string;
}
/**
 * @CancelApplyContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface CancelApplyContent {
    applier: Player | undefined;
    applierLinkMicId: string;
}
/**
 * @CancelInviteContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface CancelInviteContent {
    invitor: Player | undefined;
    invitorLinkMicId: string;
    inviteeLinkMicId: string;
    inviteSeqId: string;
    invitee: Player | undefined;
}
/**
 * @LeaveContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface LeaveContent {
    leaver: Player | undefined;
    leaveReason: string;
    linkedUserUiPositions: string[];
    uiPos: PosIdentity[];
}
/**
 * @FinishChannelContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface FinishChannelContent {
    owner: Player | undefined;
    finishReason: string;
}
/**
 * @JoinDirectContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface JoinDirectContent {
    joiner: LinkLayerListUser | undefined;
    allUsers: AllListUser | undefined;
}
/**
 * @LeaveJoinGroupContent
 * proto.webcast.im
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface LeaveJoinGroupContent {
    operator: GroupPlayer | undefined;
    groupChannelId: string;
    leaveSource: string;
    linkedUserUiPositions: string[];
}
/**
 * @PermitJoinGroupContent
 * proto.webcast.im
 */
export interface PermitJoinGroupContent {
    approver: GroupPlayer | undefined;
    agreeStatus: AgreeStatus;
    type: JoinType;
    groupExtInfoList: RTCExtraInfo[];
    groupUser: GroupChannelAllUser | undefined;
    migrationDetails: MigrationDetails | undefined;
    linkedUserUiPositions: string[];
}
export interface MigrationDetails {
    isMigrate: boolean;
    sourceGroupChannelId: string;
    targetGroupChannelId: string;
}
/**
 * @CancelJoinGroupContent
 * proto.webcast.im
 */
export interface CancelJoinGroupContent {
    leaverList: GroupPlayer[];
    operator: GroupPlayer | undefined;
    type: JoinType;
    groupUser: GroupChannelAllUser | undefined;
}
export interface P2PGroupChangeContent {
    groupExtInfoList: RTCExtraInfo[];
    groupUser: GroupChannelAllUser | undefined;
    migrationDetails: MigrationDetails | undefined;
    contentPos: ContentPosition[];
}
export interface GroupChangeContent {
    groupUser: GroupChannelAllUser | undefined;
    linkedUserUiPositions: string[];
}
export interface BusinessContent {
    overLength: string;
    multiLiveContent: MultiLiveContent | undefined;
    cohostContent: BusinessContent_CohostContent | undefined;
}
export interface BusinessContent_CohostContent {
    joinGroupBizContent: BusinessContent_JoinGroupBizContent | undefined;
    permitJoinGroupBizContent: BusinessContent_PermitJoinGroupBizContent | undefined;
    listChangeBizContent: BusinessContent_ListChangeBizContent | undefined;
}
export interface BusinessContent_PermitJoinGroupBizContent {
    replyStatus: ReplyStatus;
    sourceType: SourceType;
}
export interface BusinessContent_ListChangeBizContent {
    userInfos: {
        [key: string]: BusinessContent_CohostUserInfo;
    };
    waitingUsers: BusinessContent_ListChangeBizContent_VirtualWaitingUser[];
}
export interface BusinessContent_ListChangeBizContent_UserInfosEntry {
    key: string;
    value: BusinessContent_CohostUserInfo | undefined;
}
export interface BusinessContent_ListChangeBizContent_VirtualWaitingUser {
    userId: string;
    timestamp: string;
    avatars: Image[];
}
export interface BusinessContent_CohostUserInfo {
    permissionType: string;
    sourceType: SourceType;
    isLowVersion: boolean;
    bestTeammateUid: string;
    hasTopicPerm: boolean;
    streamConfig: BusinessContent_CohostUserInfo_CohostStreamConfig | undefined;
    inDifferentInviteTypeControlGroup: boolean;
    nickname: string;
    displayId: string;
    avatarThumb: Image | undefined;
    followStatus: string;
    userIdStr: string;
}
export interface BusinessContent_CohostUserInfo_CohostStreamConfig {
    screenShareStreamId: string;
}
export interface BusinessContent_JoinGroupBizContent {
    fromRoomAgeRestricted: number;
    fromTag: BusinessContent_Tag | undefined;
    dialog: BusinessContent_PerceptionDialogInfo | undefined;
    punishInfo: PunishEventInfo | undefined;
    topicInfo: CohostTopic | undefined;
    algoRequestId: string;
    cohostLayoutMode: CohostLayoutMode;
    tag: BusinessContent_JoinGroupBizContent_TagV2 | undefined;
    gameTag: BusinessContent_JoinGroupBizContent_RivalsGameTag | undefined;
    newUserEducation: string;
    joinGroupMsgExtra: BusinessContent_JoinGroupMessageExtra | undefined;
}
export interface BusinessContent_JoinGroupBizContent_RivalsGameTag {
    tagId: string;
    tagDisplayText: string;
}
export interface BusinessContent_JoinGroupBizContent_TagV2 {
    tagClassification: TagClassification;
    tagType: number;
    tagValue: string;
    starlingKey: string;
    secondDegreeRelationContent: BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent | undefined;
    cohostHistoryDay: string;
    similarInterestContent: BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent | undefined;
}
export interface BusinessContent_JoinGroupBizContent_TagV2_UserInfo {
    userId: string;
    nickName: string;
    avatarThumb: Image | undefined;
}
export interface BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent {
    relatedUsers: BusinessContent_JoinGroupBizContent_TagV2_UserInfo[];
    totalRelatedUserCnt: string;
}
export interface BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent {
    contentId: string;
    displayText: string;
}
export interface BusinessContent_Tag {
    tagType: number;
    tagValue: string;
    tagText: string;
}
export interface BusinessContent_PerceptionDialogInfo {
    /** @warning Enum not found, should be IconType */
    iconType: string;
    title: Text | undefined;
    subTitle: Text | undefined;
    adviceActionText: Text | undefined;
    defaultActionText: Text | undefined;
    violationDetailUrl: string;
    scene: number;
    targetUserId: string;
    targetRoomId: string;
    countDownTime: string;
    showFeedback: boolean;
    feedbackOptionsList: BusinessContent_PerceptionFeedbackOption[];
    policyTip: string;
}
export interface BusinessContent_PerceptionFeedbackOption {
    id: string;
    contentKey: string;
}
export interface BusinessContent_JoinGroupMessageExtra {
    sourceType: string;
    extra: BusinessContent_JoinGroupMessageExtra_RivalExtra | undefined;
    otherUsersList: BusinessContent_JoinGroupMessageExtra_RivalExtra[];
}
/**
 * @RivalExtra
 * proto.webcast.im.JoinGroupMessageExtra
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface BusinessContent_JoinGroupMessageExtra_RivalExtra {
    userCount: string;
    avatarThumb: Image | undefined;
    displayId: string;
    authenticationInfo: BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo | undefined;
    nickname: string;
    followStatus: string;
    hashtag: BusinessContent_Hashtag | undefined;
    topHostInfo: BusinessContent_TopHostInfo | undefined;
    userId: string;
    isBestTeammate: boolean;
}
export interface BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo {
    customVerify: string;
    enterpriseVerifyReason: string;
    authenticationBadge: Image | undefined;
}
export interface BusinessContent_Hashtag {
    id: string;
    title: string;
    image: Image | undefined;
    namespace: HashtagNamespace;
}
export interface BusinessContent_TopHostInfo {
    rankType: string;
    topIndex: string;
}
export interface JoinGroupContent {
    groupUser: GroupChannelAllUser | undefined;
    joinUser: GroupPlayer | undefined;
    type: JoinType;
    groupExtInfo: RTCExtraInfo[];
}
export interface PrivilegeLogExtra {
    dataVersion: string;
    privilegeId: string;
    privilegeVersion: string;
    privilegeOrderId: string;
    level: string;
}
export interface FontStyle {
    fontSize: number;
    fontWidth: number;
    fontColor: string;
    borderColor: string;
}
export interface UserHonor {
    totalDiamond: string;
    diamondIcon: Image | undefined;
    currentHonorName: string;
    currentHonorIcon: Image | undefined;
    nextHonorName: string;
    level: number;
    nextHonorIcon: Image | undefined;
    currentDiamond: string;
    thisGradeMinDiamond: string;
    thisGradeMaxDiamond: string;
    gradeDescribe: string;
    gradeIconList: GradeIcon[];
    screenChatType: string;
    imIcon: Image | undefined;
    imIconWithLevel: Image | undefined;
    liveIcon: Image | undefined;
    newImIconWithLevel: Image | undefined;
    newLiveIcon: Image | undefined;
    upgradeNeedConsume: string;
    nextPrivileges: string;
    profileDialogBg: Image | undefined;
    profileDialogBackBg: Image | undefined;
    score: string;
    gradeBanner: string;
}
/**
 * @GradeIcon
 * proto.webcast.data.User.PayGrade
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
export interface GradeIcon {
    icon: Image | undefined;
    iconDiamond: string;
    level: string;
    levelStr: string;
}
export interface BorderInfo {
    icon: Image | undefined;
    level: string;
    source: string;
    profileDecorationRibbon: Image | undefined;
    borderLogExtra: PrivilegeLogExtra | undefined;
    ribbonLogExtra: PrivilegeLogExtra | undefined;
    avatarBackgroundColor: string;
    avatarBackgroundBorderColor: string;
}
export interface FansClubMember {
    data: FansClubData | undefined;
    preferData: {
        [key: number]: FansClubData;
    };
}
export interface FansClubMember_PreferDataEntry {
    key: number;
    value: FansClubData | undefined;
}
export interface FansClubData {
    clubName: string;
    level: number;
    userFansClubStatus: number;
    badge: FansClubData_UserBadge | undefined;
    availableGiftIds: string[];
    anchorId: string;
}
export interface FansClubData_UserBadge {
    icons: {
        [key: number]: Image;
    };
    title: string;
}
export interface FansClubData_UserBadge_IconsEntry {
    key: number;
    value: Image | undefined;
}
export interface Author {
    videoTotalCount: string;
    videoTotalPlayCount: string;
    videoTotalFavoriteCount: string;
}
export interface PublicAreaCommon {
    userLabel: Image | undefined;
    userConsumeInRoom: string;
}
export interface PublicAreaMessageCommon {
    scrollGapCount: string;
    anchorScrollGapCount: string;
    releaseToScrollArea: boolean;
    anchorReleaseToScrollArea: boolean;
    isAnchorMarked: boolean;
    creatorSuccessInfo: PublicAreaMessageCommon_CreatorSuccessInfo | undefined;
    portraitInfo: PublicAreaMessageCommon_PortraitInfo | undefined;
    userInteractionInfo: PublicAreaMessageCommon_UserInteractionInfo | undefined;
    adminFoldType: string;
}
export interface PublicAreaMessageCommon_TagItem {
    tagType: TagType;
    tagText: Text | undefined;
}
export interface PublicAreaMessageCommon_Topic {
    topicActionType: TopicActionType;
    topicText: Text | undefined;
    topicTips: Text | undefined;
}
export interface PublicAreaMessageCommon_CreatorSuccessInfo {
    tags: PublicAreaMessageCommon_TagItem[];
    topic: PublicAreaMessageCommon_Topic | undefined;
}
export interface PublicAreaMessageCommon_UserMetrics {
    type: UserMetricsType;
    metricsValue: string;
}
export interface PublicAreaMessageCommon_PortraitTag {
    tagId: string;
    priority: string;
    showValue: string;
    showArgs: string;
}
export interface PublicAreaMessageCommon_PortraitInfo {
    userMetrics: PublicAreaMessageCommon_UserMetrics[];
    portraitTag: PublicAreaMessageCommon_PortraitTag[];
}
export interface PublicAreaMessageCommon_UserInteractionInfo {
    likeCnt: string;
    commentCnt: string;
    shareCnt: string;
}
export interface GiftModeMeta {
    giftId: string;
    giftNameKey: string;
    giftIconImage: Image | undefined;
    giftModeDesc: Text | undefined;
}
export interface BattleTeamUser {
    userId: string;
    score: string;
    userIdStr: string;
}
export interface BattleSetting {
    battleId: string;
    startTimeMs: string;
    duration: number;
    channelId: string;
    status: number;
    inviteType: BattleInviteType;
    giftModeMeta: GiftModeMeta | undefined;
    battleType: BattleType;
    extraDurationSecond: string;
    endTimeMs: string;
}
export interface BattleTeamUserArmies {
    teamId: string;
    teamUsers: BattleTeamUser[];
    teamTotalScore: string;
    userArmies: BattleUserArmies | undefined;
    hostRank: string;
}
export interface BattleUserArmies {
    userArmy: BattleUserArmy[];
    hostScore: string;
    anchorIdStr: string;
}
export interface BattleUserArmy {
    userId: string;
    score: string;
    nickname: string;
    avatarThumb: Image | undefined;
    diamondScore: string;
    userIdStr: string;
}
export interface HighScoreControlCfg {
    normalControlApplied: boolean;
    threshold: string;
    originDisplayToUserList: string[];
}
export declare const CommonMessageData: MessageFns<CommonMessageData>;
export declare const CommonMessageData_LiveMessageSEI: MessageFns<CommonMessageData_LiveMessageSEI>;
export declare const CommonMessageData_LiveMessageID: MessageFns<CommonMessageData_LiveMessageID>;
export declare const Text: MessageFns<Text>;
export declare const Text_TextPiece: MessageFns<Text_TextPiece>;
export declare const Text_TextFormat: MessageFns<Text_TextFormat>;
export declare const Text_TextPieceGift: MessageFns<Text_TextPieceGift>;
export declare const Text_TextPiecePatternRef: MessageFns<Text_TextPiecePatternRef>;
export declare const Text_TextPieceUser: MessageFns<Text_TextPieceUser>;
export declare const Text_PatternRef: MessageFns<Text_PatternRef>;
export declare const Image: MessageFns<Image>;
export declare const Image_Content: MessageFns<Image_Content>;
export declare const BadgeStruct: MessageFns<BadgeStruct>;
export declare const BadgeStruct_CombineBadge: MessageFns<BadgeStruct_CombineBadge>;
export declare const BadgeStruct_ArrowConfig: MessageFns<BadgeStruct_ArrowConfig>;
export declare const BadgeStruct_ProfileContent: MessageFns<BadgeStruct_ProfileContent>;
export declare const BadgeStruct_ProjectionConfig: MessageFns<BadgeStruct_ProjectionConfig>;
export declare const BadgeStruct_NumberConfig: MessageFns<BadgeStruct_NumberConfig>;
export declare const BadgeStruct_ProfileCardPanel: MessageFns<BadgeStruct_ProfileCardPanel>;
export declare const BadgeStruct_CombineBadgeBackground: MessageFns<BadgeStruct_CombineBadgeBackground>;
export declare const BadgeStruct_ImageBadge: MessageFns<BadgeStruct_ImageBadge>;
export declare const BadgeStruct_TextBadge: MessageFns<BadgeStruct_TextBadge>;
export declare const BadgeStruct_IconConfig: MessageFns<BadgeStruct_IconConfig>;
export declare const BadgeStruct_StringBadge: MessageFns<BadgeStruct_StringBadge>;
export declare const BadgeStruct_PaddingInfo: MessageFns<BadgeStruct_PaddingInfo>;
export declare const Gift: MessageFns<Gift>;
export declare const Gift_GiftPanelBanner: MessageFns<Gift_GiftPanelBanner>;
export declare const Gift_BatchGiftInfo: MessageFns<Gift_BatchGiftInfo>;
export declare const Gift_CrossScreenEffectInfo: MessageFns<Gift_CrossScreenEffectInfo>;
export declare const Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry: MessageFns<Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntry>;
export declare const Gift_CrossScreenEffectInfo_ActionEffectIdsEntry: MessageFns<Gift_CrossScreenEffectInfo_ActionEffectIdsEntry>;
export declare const Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry: MessageFns<Gift_CrossScreenEffectInfo_ReactionEffectIdsEntry>;
export declare const Gift_GiftSponsorInfo: MessageFns<Gift_GiftSponsorInfo>;
export declare const Gift_UGGiftStructInfo: MessageFns<Gift_UGGiftStructInfo>;
export declare const Gift_GiftSkin: MessageFns<Gift_GiftSkin>;
export declare const Gift_GiftText: MessageFns<Gift_GiftText>;
export declare const Gift_GiftSkinToGiftTextsInfo: MessageFns<Gift_GiftSkinToGiftTextsInfo>;
export declare const Gift_GiftBoxInfo: MessageFns<Gift_GiftBoxInfo>;
export declare const User: MessageFns<User>;
export declare const User_LiveEventInfo: MessageFns<User_LiveEventInfo>;
export declare const User_LiveEventInfo_WalletPackage: MessageFns<User_LiveEventInfo_WalletPackage>;
export declare const User_ActivityInfo: MessageFns<User_ActivityInfo>;
export declare const User_AnchorLevel: MessageFns<User_AnchorLevel>;
export declare const User_AuthenticationInfo: MessageFns<User_AuthenticationInfo>;
export declare const User_AuthorStats: MessageFns<User_AuthorStats>;
export declare const User_Border: MessageFns<User_Border>;
export declare const User_ComboBadgeInfo: MessageFns<User_ComboBadgeInfo>;
export declare const User_EcommerceEntrance: MessageFns<User_EcommerceEntrance>;
export declare const User_EcommerceEntrance_ShopEntranceInfo: MessageFns<User_EcommerceEntrance_ShopEntranceInfo>;
export declare const User_EcommerceEntrance_ShopEntranceInfo_StoreLabel: MessageFns<User_EcommerceEntrance_ShopEntranceInfo_StoreLabel>;
export declare const User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel: MessageFns<User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel>;
export declare const User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage: MessageFns<User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage>;
export declare const User_EcommerceEntrance_ShowcaseEntranceInfo: MessageFns<User_EcommerceEntrance_ShowcaseEntranceInfo>;
export declare const User_FansClub: MessageFns<User_FansClub>;
export declare const User_FansClub_FansClubData: MessageFns<User_FansClub_FansClubData>;
export declare const User_FansClubInfo: MessageFns<User_FansClubInfo>;
export declare const User_FollowInfo: MessageFns<User_FollowInfo>;
export declare const User_OwnRoom: MessageFns<User_OwnRoom>;
export declare const User_PayGrade: MessageFns<User_PayGrade>;
export declare const User_SubscribeBadge: MessageFns<User_SubscribeBadge>;
export declare const User_SubscribeInfo: MessageFns<User_SubscribeInfo>;
export declare const User_UserAttr: MessageFns<User_UserAttr>;
export declare const User_UserStats: MessageFns<User_UserStats>;
export declare const Emote: MessageFns<Emote>;
export declare const Emote_AuditInfo: MessageFns<Emote_AuditInfo>;
export declare const Emote_EmoteUploadInfo: MessageFns<Emote_EmoteUploadInfo>;
export declare const PunishEventInfo: MessageFns<PunishEventInfo>;
export declare const MsgFilter: MessageFns<MsgFilter>;
export declare const UserIdentity: MessageFns<UserIdentity>;
export declare const LiveStreamGoal: MessageFns<LiveStreamGoal>;
export declare const LiveStreamGoal_AuditInfo: MessageFns<LiveStreamGoal_AuditInfo>;
export declare const LiveStreamGoal_LiveStreamSubGoal: MessageFns<LiveStreamGoal_LiveStreamSubGoal>;
export declare const LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo: MessageFns<LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo>;
export declare const LiveStreamGoal_LiveStreamSubGoalGift: MessageFns<LiveStreamGoal_LiveStreamSubGoalGift>;
export declare const LiveStreamGoal_LiveStreamGoalContributor: MessageFns<LiveStreamGoal_LiveStreamGoalContributor>;
export declare const LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution: MessageFns<LiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution>;
export declare const LiveStreamGoal_GoalStats: MessageFns<LiveStreamGoal_GoalStats>;
export declare const LiveStreamGoal_GoalStats_GoalComparison: MessageFns<LiveStreamGoal_GoalStats_GoalComparison>;
export declare const LiveStreamGoalIndicator: MessageFns<LiveStreamGoalIndicator>;
export declare const Ranking: MessageFns<Ranking>;
export declare const TikTokColor: MessageFns<TikTokColor>;
export declare const ValueLabel: MessageFns<ValueLabel>;
export declare const TimeStampContainer: MessageFns<TimeStampContainer>;
export declare const PollStartContent: MessageFns<PollStartContent>;
export declare const PollEndContent: MessageFns<PollEndContent>;
export declare const PollOptionInfo: MessageFns<PollOptionInfo>;
export declare const VoteUser: MessageFns<VoteUser>;
export declare const PollUpdateVotesContent: MessageFns<PollUpdateVotesContent>;
export declare const UserFanTicket: MessageFns<UserFanTicket>;
export declare const FanTicketRoomNoticeContent: MessageFns<FanTicketRoomNoticeContent>;
export declare const LinkerAcceptNoticeContent: MessageFns<LinkerAcceptNoticeContent>;
export declare const LinkerCancelContent: MessageFns<LinkerCancelContent>;
export declare const ListUser: MessageFns<ListUser>;
export declare const LinkerCloseContent: MessageFns<LinkerCloseContent>;
export declare const LinkerCreateContent: MessageFns<LinkerCreateContent>;
export declare const LinkerEnterContent: MessageFns<LinkerEnterContent>;
export declare const LinkerInviteContent: MessageFns<LinkerInviteContent>;
export declare const LinkerInviteContent_RtcExtInfoMapEntry: MessageFns<LinkerInviteContent_RtcExtInfoMapEntry>;
export declare const LinkerInviteContent_InviteTopHostInfo: MessageFns<LinkerInviteContent_InviteTopHostInfo>;
export declare const LinkerInviteContent_LinkmicUserInfo: MessageFns<LinkerInviteContent_LinkmicUserInfo>;
export declare const LinkerInviteContent_PerceptionDialogInfo: MessageFns<LinkerInviteContent_PerceptionDialogInfo>;
export declare const LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption: MessageFns<LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption>;
export declare const LinkerInviteContent_CohostABTestSetting: MessageFns<LinkerInviteContent_CohostABTestSetting>;
export declare const LinkerInviteContent_CohostABTestSetting_CohostABTestList: MessageFns<LinkerInviteContent_CohostABTestSetting_CohostABTestList>;
export declare const LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest: MessageFns<LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest>;
export declare const LinkerInviteContent_LinkerInviteMessageExtra: MessageFns<LinkerInviteContent_LinkerInviteMessageExtra>;
export declare const LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra: MessageFns<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra>;
export declare const LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo: MessageFns<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo>;
export declare const LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag: MessageFns<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag>;
export declare const LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo: MessageFns<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo>;
export declare const LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser: MessageFns<LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser>;
export declare const CohostTopic: MessageFns<CohostTopic>;
export declare const LinkerKickOutContent: MessageFns<LinkerKickOutContent>;
export declare const LinkerLeaveContent: MessageFns<LinkerLeaveContent>;
export declare const LinkerLinkedListChangeContent: MessageFns<LinkerLinkedListChangeContent>;
export declare const CohostListChangeContent: MessageFns<CohostListChangeContent>;
export declare const LinkerListChangeContent: MessageFns<LinkerListChangeContent>;
export declare const LinkerMediaChangeContent: MessageFns<LinkerMediaChangeContent>;
export declare const LinkerMediaChangeContent_LinkerMediaChangeOperator: MessageFns<LinkerMediaChangeContent_LinkerMediaChangeOperator>;
export declare const LinkerMicIdxUpdateContent: MessageFns<LinkerMicIdxUpdateContent>;
export declare const LinkerMuteContent: MessageFns<LinkerMuteContent>;
export declare const LinkerRandomMatchContent: MessageFns<LinkerRandomMatchContent>;
export declare const LinkerReplyContent: MessageFns<LinkerReplyContent>;
export declare const LinkerReplyContent_LinkmicInfo: MessageFns<LinkerReplyContent_LinkmicInfo>;
export declare const LinkerSetting: MessageFns<LinkerSetting>;
export declare const LinkerSysKickOutContent: MessageFns<LinkerSysKickOutContent>;
export declare const LinkmicUserToastContent: MessageFns<LinkmicUserToastContent>;
export declare const LinkerUpdateUserContent: MessageFns<LinkerUpdateUserContent>;
export declare const LinkerUpdateUserContent_UpdateInfoEntry: MessageFns<LinkerUpdateUserContent_UpdateInfoEntry>;
export declare const LinkerUpdateUserSettingContent: MessageFns<LinkerUpdateUserSettingContent>;
export declare const LinkerWaitingListChangeContent: MessageFns<LinkerWaitingListChangeContent>;
export declare const MultiLiveAnchorPanelSettings: MessageFns<MultiLiveAnchorPanelSettings>;
export declare const Player: MessageFns<Player>;
export declare const AllListUser: MessageFns<AllListUser>;
export declare const LinkLayerListUser: MessageFns<LinkLayerListUser>;
export declare const Position: MessageFns<Position>;
export declare const LinkPosition: MessageFns<LinkPosition>;
export declare const GroupPlayer: MessageFns<GroupPlayer>;
export declare const DSLConfig: MessageFns<DSLConfig>;
export declare const GroupChannelAllUser: MessageFns<GroupChannelAllUser>;
export declare const GroupChannelUser: MessageFns<GroupChannelUser>;
export declare const RTCExtraInfo: MessageFns<RTCExtraInfo>;
export declare const RTCExtraInfo_RTCMixBase: MessageFns<RTCExtraInfo_RTCMixBase>;
export declare const RTCExtraInfo_ByteRTCExtInfo: MessageFns<RTCExtraInfo_ByteRTCExtInfo>;
export declare const RTCExtraInfo_RTCInfoExtra: MessageFns<RTCExtraInfo_RTCInfoExtra>;
export declare const RTCExtraInfo_RTCOther: MessageFns<RTCExtraInfo_RTCOther>;
export declare const RTCExtraInfo_RTCEngineConfig: MessageFns<RTCExtraInfo_RTCEngineConfig>;
export declare const RTCExtraInfo_RTCLiveVideoParam: MessageFns<RTCExtraInfo_RTCLiveVideoParam>;
export declare const RTCExtraInfo_RTCVideoParam: MessageFns<RTCExtraInfo_RTCVideoParam>;
export declare const RTCExtraInfo_RTCBitrateMap: MessageFns<RTCExtraInfo_RTCBitrateMap>;
export declare const CreateChannelContent: MessageFns<CreateChannelContent>;
export declare const ListChangeContent: MessageFns<ListChangeContent>;
export declare const ContentPosition: MessageFns<ContentPosition>;
export declare const MicPositionData: MessageFns<MicPositionData>;
export declare const MultiLiveContent: MessageFns<MultiLiveContent>;
export declare const MultiLiveContent_ApplyBizContent: MessageFns<MultiLiveContent_ApplyBizContent>;
export declare const MultiLiveContent_JoinDirectBizContent: MessageFns<MultiLiveContent_JoinDirectBizContent>;
export declare const MultiLiveContent_InviteBizContent: MessageFns<MultiLiveContent_InviteBizContent>;
export declare const MultiLiveContent_ReplyBizContent: MessageFns<MultiLiveContent_ReplyBizContent>;
export declare const MultiLiveContent_PermitBizContent: MessageFns<MultiLiveContent_PermitBizContent>;
export declare const MultiLiveContent_KickOutBizContent: MessageFns<MultiLiveContent_KickOutBizContent>;
export declare const InviteContent: MessageFns<InviteContent>;
export declare const ApplyContent: MessageFns<ApplyContent>;
export declare const PermitApplyContent: MessageFns<PermitApplyContent>;
export declare const ReplyInviteContent: MessageFns<ReplyInviteContent>;
export declare const KickOutContent: MessageFns<KickOutContent>;
export declare const PosIdentity: MessageFns<PosIdentity>;
export declare const CancelApplyContent: MessageFns<CancelApplyContent>;
export declare const CancelInviteContent: MessageFns<CancelInviteContent>;
export declare const LeaveContent: MessageFns<LeaveContent>;
export declare const FinishChannelContent: MessageFns<FinishChannelContent>;
export declare const JoinDirectContent: MessageFns<JoinDirectContent>;
export declare const LeaveJoinGroupContent: MessageFns<LeaveJoinGroupContent>;
export declare const PermitJoinGroupContent: MessageFns<PermitJoinGroupContent>;
export declare const MigrationDetails: MessageFns<MigrationDetails>;
export declare const CancelJoinGroupContent: MessageFns<CancelJoinGroupContent>;
export declare const P2PGroupChangeContent: MessageFns<P2PGroupChangeContent>;
export declare const GroupChangeContent: MessageFns<GroupChangeContent>;
export declare const BusinessContent: MessageFns<BusinessContent>;
export declare const BusinessContent_CohostContent: MessageFns<BusinessContent_CohostContent>;
export declare const BusinessContent_PermitJoinGroupBizContent: MessageFns<BusinessContent_PermitJoinGroupBizContent>;
export declare const BusinessContent_ListChangeBizContent: MessageFns<BusinessContent_ListChangeBizContent>;
export declare const BusinessContent_ListChangeBizContent_UserInfosEntry: MessageFns<BusinessContent_ListChangeBizContent_UserInfosEntry>;
export declare const BusinessContent_ListChangeBizContent_VirtualWaitingUser: MessageFns<BusinessContent_ListChangeBizContent_VirtualWaitingUser>;
export declare const BusinessContent_CohostUserInfo: MessageFns<BusinessContent_CohostUserInfo>;
export declare const BusinessContent_CohostUserInfo_CohostStreamConfig: MessageFns<BusinessContent_CohostUserInfo_CohostStreamConfig>;
export declare const BusinessContent_JoinGroupBizContent: MessageFns<BusinessContent_JoinGroupBizContent>;
export declare const BusinessContent_JoinGroupBizContent_RivalsGameTag: MessageFns<BusinessContent_JoinGroupBizContent_RivalsGameTag>;
export declare const BusinessContent_JoinGroupBizContent_TagV2: MessageFns<BusinessContent_JoinGroupBizContent_TagV2>;
export declare const BusinessContent_JoinGroupBizContent_TagV2_UserInfo: MessageFns<BusinessContent_JoinGroupBizContent_TagV2_UserInfo>;
export declare const BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent: MessageFns<BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent>;
export declare const BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent: MessageFns<BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent>;
export declare const BusinessContent_Tag: MessageFns<BusinessContent_Tag>;
export declare const BusinessContent_PerceptionDialogInfo: MessageFns<BusinessContent_PerceptionDialogInfo>;
export declare const BusinessContent_PerceptionFeedbackOption: MessageFns<BusinessContent_PerceptionFeedbackOption>;
export declare const BusinessContent_JoinGroupMessageExtra: MessageFns<BusinessContent_JoinGroupMessageExtra>;
export declare const BusinessContent_JoinGroupMessageExtra_RivalExtra: MessageFns<BusinessContent_JoinGroupMessageExtra_RivalExtra>;
export declare const BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo: MessageFns<BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo>;
export declare const BusinessContent_Hashtag: MessageFns<BusinessContent_Hashtag>;
export declare const BusinessContent_TopHostInfo: MessageFns<BusinessContent_TopHostInfo>;
export declare const JoinGroupContent: MessageFns<JoinGroupContent>;
export declare const PrivilegeLogExtra: MessageFns<PrivilegeLogExtra>;
export declare const FontStyle: MessageFns<FontStyle>;
export declare const UserHonor: MessageFns<UserHonor>;
export declare const GradeIcon: MessageFns<GradeIcon>;
export declare const BorderInfo: MessageFns<BorderInfo>;
export declare const FansClubMember: MessageFns<FansClubMember>;
export declare const FansClubMember_PreferDataEntry: MessageFns<FansClubMember_PreferDataEntry>;
export declare const FansClubData: MessageFns<FansClubData>;
export declare const FansClubData_UserBadge: MessageFns<FansClubData_UserBadge>;
export declare const FansClubData_UserBadge_IconsEntry: MessageFns<FansClubData_UserBadge_IconsEntry>;
export declare const Author: MessageFns<Author>;
export declare const PublicAreaCommon: MessageFns<PublicAreaCommon>;
export declare const PublicAreaMessageCommon: MessageFns<PublicAreaMessageCommon>;
export declare const PublicAreaMessageCommon_TagItem: MessageFns<PublicAreaMessageCommon_TagItem>;
export declare const PublicAreaMessageCommon_Topic: MessageFns<PublicAreaMessageCommon_Topic>;
export declare const PublicAreaMessageCommon_CreatorSuccessInfo: MessageFns<PublicAreaMessageCommon_CreatorSuccessInfo>;
export declare const PublicAreaMessageCommon_UserMetrics: MessageFns<PublicAreaMessageCommon_UserMetrics>;
export declare const PublicAreaMessageCommon_PortraitTag: MessageFns<PublicAreaMessageCommon_PortraitTag>;
export declare const PublicAreaMessageCommon_PortraitInfo: MessageFns<PublicAreaMessageCommon_PortraitInfo>;
export declare const PublicAreaMessageCommon_UserInteractionInfo: MessageFns<PublicAreaMessageCommon_UserInteractionInfo>;
export declare const GiftModeMeta: MessageFns<GiftModeMeta>;
export declare const BattleTeamUser: MessageFns<BattleTeamUser>;
export declare const BattleSetting: MessageFns<BattleSetting>;
export declare const BattleTeamUserArmies: MessageFns<BattleTeamUserArmies>;
export declare const BattleUserArmies: MessageFns<BattleUserArmies>;
export declare const BattleUserArmy: MessageFns<BattleUserArmy>;
export declare const HighScoreControlCfg: MessageFns<HighScoreControlCfg>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
//# sourceMappingURL=data.d.ts.map