{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/types/client.ts"],"names":[],"mappings":"","sourcesContent":["import { AxiosRequestConfig } from 'axios';\nimport * as tikTokSchema from '@/types/tiktok-schema';\nimport { MessageFns, ProtoMessageFetchResult, WebcastPushFrame } from '@/types/tiktok-schema';\nimport { ClientOptions } from 'ws';\n\nexport type TikTokLiveConnectionOptions = {\n    processInitialData: boolean;\n    fetchRoomInfoOnConnect: boolean;\n    enableExtendedGiftInfo: boolean;\n    enableRequestPolling: boolean;\n    requestPollingIntervalMs: number;\n    sessionId: string | null;\n    ttTargetIdc: string | null;\n    signApiKey: string | null;\n    authenticateWs: boolean;\n    connectWithUniqueId: boolean;\n    disableEulerFallbacks: boolean;\n\n    webClientParams: Record<string, string>;\n    webClientHeaders: Record<string, string>;\n    webClientOptions: AxiosRequestConfig;\n\n    wsClientHeaders: Record<string, string>;\n    wsClientParams: Record<string, string>;\n    wsClientOptions: ClientOptions;\n\n    // Override the default websocket provider\n    signedWebSocketProvider?: (props: FetchSignedWebSocketParams) => Promise<ProtoMessageFetchResult>\n}\n\n\nexport type RoomInfo = Record<string, any> & { data: { status: number } }\nexport type RoomGiftInfo = any;\n\nexport type FetchSignedWebSocketParams = {\n    roomId?: string;\n    uniqueId?: string;\n    ttTargetIdc?: string;\n    sessionId?: string;\n}\n\n\nexport type WebcastHttpClientConfig = {\n    customHeaders: Record<string, string>;\n    axiosOptions: AxiosRequestConfig;\n    clientParams: Record<string, string>;\n    authenticateWs?: boolean;\n    signApiKey?: string;\n}\n\nexport type DecodedWebcastPushFrame = WebcastPushFrame & {\n    protoMessageFetchResult?: ProtoMessageFetchResult;\n}\n\n\nexport interface IWebcastConfig {\n    TIKTOK_HOST_WEB: string;\n    TIKTOK_HOST_WEBCAST: string;\n    TIKTOK_HTTP_ORIGIN: string;\n\n    // HTTP Client Options\n    DEFAULT_HTTP_CLIENT_COOKIES: Record<string, string>;\n    DEFAULT_HTTP_CLIENT_PARAMS: Record<string, string>;\n    DEFAULT_HTTP_CLIENT_OPTIONS: AxiosRequestConfig;\n    DEFAULT_WS_CLIENT_PARAMS_APPEND_PARAMETER: string;\n    DEFAULT_HTTP_CLIENT_HEADERS: Record<string, string> & {\n        'User-Agent': string;\n    };\n\n    // WS Client Options\n    DEFAULT_WS_CLIENT_PARAMS: Record<string, string>;\n    DEFAULT_WS_CLIENT_HEADERS: Record<string, string> & {\n        'User-Agent': string;\n    };\n\n}\n\n\ntype ExtractMessageType<T> = T extends MessageFns<infer U> ? U : never;\n\n// Messages\nexport type WebcastMessage = {\n    [K in keyof typeof tikTokSchema as ExtractMessageType<typeof tikTokSchema[K]> extends never ? never : K]:\n    ExtractMessageType<typeof tikTokSchema[K]>;\n};\n\ntype HasCommon<T> = T extends { common: any } ? T : never;\n\n\n// Top-Level Messages\nexport type WebcastEventMessage = {\n    [K in keyof WebcastMessage as HasCommon<WebcastMessage[K]> extends never ? never : K]: WebcastMessage[K];\n};\n\n\nexport interface IWebcastDeserializeConfig {\n    skipMessageTypes: (keyof WebcastEventMessage)[];\n}\n\n\nexport interface IWebcastDeserializeConfig {\n    skipMessageTypes: (keyof WebcastEventMessage)[];\n}\n\n\nexport type DecodedData = {\n    [K in keyof WebcastEventMessage]: {\n        type: K;\n        data: WebcastEventMessage[K]\n    }\n}[keyof WebcastEventMessage];\n\ndeclare module '@/types/tiktok-schema' {\n    export interface BaseProtoMessage {\n        decodedData?: DecodedData;\n    }\n\n    export interface WebcastGiftMessage {\n        extendedGiftInfo?: any;\n    }\n\n}\n\nexport type WebcastHttpClientRequestParams = Omit<Omit<AxiosRequestConfig, 'url'>, 'baseURL'> & {\n    host: string;\n    path: string;\n    params?: Record<string, string>;\n    signRequest: boolean;\n};\n\n\nexport type WebSocketParams = {\n    [key: string]: string;\n    compress?: string;\n    room_id: string;\n    internal_ext: string;\n    cursor: string;\n}\n\n"]}