{"version":3,"file":"send-room-chat-euler.js","sourceRoot":"","sources":["../../../../src/lib/web/routes/send-room-chat-euler.ts"],"names":[],"mappings":";;;AAAA,yCAAsC;AAGtC,mCAA0F;AAI1F,MAAa,0BAA2B,SAAQ,aAAsE;IAElH,KAAK,CAAC,IAAI,CACN,EACI,MAAM,EACN,OAAO,EACP,SAAS,EACT,WAAW,EACX,OAAO,EACwB;QAGnC,MAAM,iBAAiB,GAAG,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC;QAC1E,MAAM,mBAAmB,GAAG,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC;QAEhF,IAAI,iBAAiB,IAAI,CAAC,mBAAmB,EAAE;YAC3C,MAAM,IAAI,kDAA0C,CAChD,qDAAqD,CACxD,CAAC;SACL;QAED,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC;YAClE,MAAM;YACN,OAAO;YACP,SAAS,EAAE,iBAAiB;YAC5B,WAAW,EAAE,mBAAmB;SACnC,EACD,OAAO,CACV,CAAC;QAEF,QAAQ,aAAa,CAAC,MAAM,EAAE;YAC1B,KAAK,GAAG,CAAC;YACT,KAAK,GAAG;gBACJ,MAAM,IAAI,2BAAmB,CACzB,qFAAqF,EACrF,aAAa,CAAC,IAAI,CAAC,OAAO,EAC1B,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,CACrC,CAAC;YACN,KAAK,GAAG;gBACJ,OAAO,aAAa,CAAC,IAAI,CAAC;YAC9B;gBACI,MAAM,IAAI,KAAK,CAAC,wBAAwB,aAAa,EAAE,IAAI,EAAE,OAAO,IAAI,eAAe,EAAE,CAAC,CAAC;SAClG;IAEL,CAAC;CAEJ;AA9CD,gEA8CC","sourcesContent":["import { Route } from '@/types/route';\nimport { IWebcastRoomChatPayload, IWebcastRoomChatRouteResponse } from '@eulerstream/euler-api-sdk';\nimport { AxiosRequestConfig } from 'axios';\nimport { FetchSignedWebSocketIdentityParameterError, PremiumFeatureError } from '@/types';\n\nexport type SendRoomChatFromEulerRouteParams = IWebcastRoomChatPayload & { options?: AxiosRequestConfig };\n\nexport class SendRoomChatFromEulerRoute extends Route<SendRoomChatFromEulerRouteParams, IWebcastRoomChatRouteResponse> {\n\n    async call(\n        {\n            roomId,\n            content,\n            sessionId,\n            ttTargetIdc,\n            options\n        }: SendRoomChatFromEulerRouteParams\n    ): Promise<IWebcastRoomChatRouteResponse> {\n\n        const resolvedSessionId = sessionId || this.webClient.cookieJar.sessionId;\n        const resolvedTtTargetIdc = ttTargetIdc || this.webClient.cookieJar.ttTargetIdc;\n\n        if (resolvedSessionId && !resolvedTtTargetIdc) {\n            throw new FetchSignedWebSocketIdentityParameterError(\n                'ttTargetIdc must be set when sessionId is provided.'\n            );\n        }\n\n        const fetchResponse = await this.webClient.webSigner.webcast.sendRoomChat({\n                roomId,\n                content,\n                sessionId: resolvedSessionId,\n                ttTargetIdc: resolvedTtTargetIdc\n            },\n            options\n        );\n\n        switch (fetchResponse.status) {\n            case 401:\n            case 403:\n                throw new PremiumFeatureError(\n                    'Sending chats requires an API key & a paid plan, as it uses cloud managed services.',\n                    fetchResponse.data.message,\n                    JSON.stringify(fetchResponse.data)\n                );\n            case 200:\n                return fetchResponse.data;\n            default:\n                throw new Error(`Failed to send chat: ${fetchResponse?.data?.message || 'Unknown error'}`);\n        }\n\n    }\n\n}\n"]}