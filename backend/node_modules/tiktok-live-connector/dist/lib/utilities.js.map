{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../../src/lib/utilities.ts"],"names":[],"mappings":"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","sourcesContent":["import * as tikTokSchema from '@/types/tiktok-schema';\nimport { MessageFns, ProtoMessageFetchResult, WebcastPushFrame } from '@/types/tiktok-schema';\nimport {\n    DecodedWebcastPushFrame,\n    IWebcastDeserializeConfig,\n    WebcastEventMessage,\n    WebcastMessage\n} from '@/types/client';\nimport * as zlib from 'node:zlib';\nimport * as util from 'node:util';\nimport { InvalidSchemaNameError, InvalidUniqueIdError, SchemaDecodeError } from '@/types/errors';\nimport { DevicePreset } from '@/lib/config';\nimport { BinaryWriter } from '@bufbuild/protobuf/wire';\n\nconst unzip = util.promisify(zlib.unzip);\n\nfunction hasProtoName(protoName: string): boolean {\n    return !!tikTokSchema[protoName];\n}\n\nexport const WebcastDeserializeConfig: IWebcastDeserializeConfig = {\n    skipMessageTypes: []\n};\n\nexport function deserializeMessage<T extends keyof WebcastMessage>(\n    protoName: T,\n    binaryMessage: Buffer\n): WebcastMessage[T] {\n\n    const messageFn: MessageFns<WebcastMessage[T]> | undefined = tikTokSchema[protoName as string];\n    if (!messageFn) throw new InvalidSchemaNameError(`Invalid schema name: ${protoName}`);\n\n    let deserializedMessage: WebcastMessage[T];\n    try {\n        deserializedMessage = messageFn.decode(binaryMessage);\n    } catch (ex) {\n        throw new SchemaDecodeError(`Failed to decode message type: ${protoName}: ` + (ex as Error).stack);\n    }\n\n    // Handle ProtoMessageFetchResult nested messages\n    if (protoName === 'ProtoMessageFetchResult') {\n        for (const message of (deserializedMessage as ProtoMessageFetchResult).messages || []) {\n            if (WebcastDeserializeConfig.skipMessageTypes.includes(message.type as keyof WebcastEventMessage)) {\n                continue;\n            }\n\n            if (!hasProtoName(message.type)) {\n                continue;\n            }\n\n            message.decodedData = {\n                type: message.type as keyof WebcastEventMessage,\n                data: deserializeMessage(message.type as keyof WebcastEventMessage, Buffer.from(message.payload))\n            } as any;\n\n        }\n    }\n\n    return deserializedMessage;\n}\n\n\nexport async function deserializeWebSocketMessage(binaryMessage: Uint8Array): Promise<DecodedWebcastPushFrame> {\n    // Websocket messages are in a container which contains additional data\n    // Message type 'msg' represents a normal WebcastResponse\n    const rawWebcastWebSocketMessage = WebcastPushFrame.decode(binaryMessage);\n    let protoMessageFetchResult: ProtoMessageFetchResult | undefined = undefined;\n\n    // Decode ANY protobuf-encoded payloads\n    if (rawWebcastWebSocketMessage.payloadEncoding === 'pb' && rawWebcastWebSocketMessage.payload) {\n        let binary: Uint8Array = rawWebcastWebSocketMessage.payload;\n\n        // Decompress binary (if gzip compressed)\n        // https://www.rfc-editor.org/rfc/rfc1950.html\n        if (binary && binary.length > 2 && binary[0] === 0x1f && binary[1] === 0x8b && binary[2] === 0x08) {\n            rawWebcastWebSocketMessage.payload = await unzip(binary);\n        }\n\n        protoMessageFetchResult = deserializeMessage('ProtoMessageFetchResult', Buffer.from(rawWebcastWebSocketMessage.payload));\n    }\n\n    const decodedContainer: DecodedWebcastPushFrame = rawWebcastWebSocketMessage;\n    decodedContainer.protoMessageFetchResult = protoMessageFetchResult;\n    return decodedContainer;\n\n}\n\nexport function validateAndNormalizeUniqueId(uniqueId: string) {\n    if (typeof uniqueId !== 'string') {\n        throw new InvalidUniqueIdError('Missing or invalid value for \\'uniqueId\\'. Please provide the username from TikTok URL.');\n    }\n\n    // Support full URI\n    uniqueId = uniqueId.replace('https://www.tiktok.com/', '');\n    uniqueId = uniqueId.replace('/live', '');\n    uniqueId = uniqueId.replace('@', '');\n    uniqueId = uniqueId.trim();\n    return uniqueId;\n}\n\n\nexport function userAgentToDevicePreset(userAgent: string): DevicePreset {\n    const firstSlash = userAgent.indexOf('/');\n    const browserName = userAgent.substring(0, firstSlash);\n    const browserVersion = userAgent.substring(firstSlash + 1);\n\n    return {\n        user_agent: userAgent,\n        browser_name: browserName,\n        browser_version: browserVersion,\n        browser_platform: userAgent.includes('Macintosh') ? 'MacIntel' : 'Win32',\n        os: userAgent.includes('Macintosh') ? 'mac' : 'windows'\n    };\n}\n\nexport function generateDeviceId() {\n    let digits = '';\n    for (let i = 0; i < 19; i++) {\n        digits += Math.floor(Math.random() * 10);\n    }\n    return digits;\n}\n\nexport function createBaseWebcastPushFrame(overrides: Partial<WebcastPushFrame>): BinaryWriter {\n    // Basically, we need to set it to \"0\" so that it DOES NOT send the field(s)\n    const undefinedNum: string = '0';\n\n    overrides = Object.fromEntries(\n        Object.entries(overrides).filter(([_, value]) => value !== undefined)\n    );\n\n    return WebcastPushFrame.encode(\n        {\n            seqId: undefinedNum,\n            logId: undefinedNum,\n            payloadEncoding: 'pb',\n            payloadType: 'msg',\n            payload: new Uint8Array(),\n            service: undefinedNum,\n            method: undefinedNum,\n            headers: {},\n            ...overrides\n        }\n    );\n\n}\n"]}