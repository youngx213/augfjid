{"version":3,"file":"data-converter.js","sourceRoot":"","sources":["../../../src/lib/_legacy/data-converter.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    CommonMessageData,\n    Emote,\n    User,\n    WebcastChatMessage,\n    WebcastEmoteChatMessage,\n    WebcastEventMessage,\n    WebcastGiftMessage,\n    WebcastLinkMicBattle,\n    WebcastQuestionNewMessage,\n    WebcastRoomUserSeqMessage,\n    WebcastSubEmote\n} from '@/types';\n\n\n/**\n * This ugly function brings the nested protobuf objects to a flat level\n * In addition, attributes in \"Long\" format are converted to strings (e.g. UserIds)\n * This makes it easier to handle the data later, since some libraries have problems to serialize this protobuf specific data.\n */\nexport function simplifyObject(\n    type: keyof WebcastEventMessage,\n    originalObject: any\n): WebcastEventMessage & Record<string, any> {\n\n    // Utility function for modifying types easily\n    const simplify = <T extends any>(fn: (object: T & Record<string, any>) => any): T & Record<string, any> => fn(originalObject as T);\n\n    if (originalObject.user) {\n        originalObject = simplify<{ user: User }>((webcastObject) => {\n            Object.assign(webcastObject, getUserAttributes(webcastObject.user));\n            delete webcastObject.user;\n            return webcastObject;\n        });\n    }\n\n    if (originalObject.common) {\n        originalObject = simplify<{ common: CommonMessageData }>((webcastObject) => {\n            Object.assign(webcastObject, webcastObject.common.displayText);\n            delete webcastObject.common.displayText;\n            Object.assign(webcastObject, webcastObject.common);\n            delete webcastObject.common;\n            return webcastObject;\n        });\n    }\n\n    switch (type) {\n        case 'WebcastQuestionNewMessage': {\n            originalObject = simplify<WebcastQuestionNewMessage>((webcastObject) => {\n                Object.assign(webcastObject, webcastObject.details);\n                delete webcastObject.details;\n                return webcastObject;\n            });\n            break;\n        }\n        case 'WebcastRoomUserSeqMessage': {\n            originalObject = simplify<WebcastRoomUserSeqMessage>((webcastObject) => {\n                webcastObject.topViewers = getTopViewerAttributes(webcastObject.ranksList);\n                delete webcastObject.ranksList;\n                return webcastObject;\n            });\n            break;\n        }\n        case 'WebcastLinkMicBattle': {\n            originalObject = simplify<WebcastLinkMicBattle>((webcastObject) => {\n                const battleUsers = [];\n\n                Object.values(webcastObject.anchorInfo).forEach((anchor) => {\n                    if (anchor.user) {\n                        battleUsers.push(getUserAttributes(anchor.user));\n                    }\n                });\n\n                webcastObject.battleUsers = battleUsers;\n                return webcastObject;\n            });\n            break;\n        }\n        case 'WebcastGiftMessage': {\n            originalObject = simplify<WebcastGiftMessage & { repeatEnd: any }>((webcastObject) => {\n                webcastObject.repeatEnd = !!webcastObject.repeatEnd;\n\n                // Add previously used JSON structure (for compatibility reasons)\n                // Can be removed soon <-- Will it ever be?\n                webcastObject.gift = {\n                    gift_id: webcastObject.giftId,\n                    repeat_count: webcastObject.repeatCount,\n                    repeat_end: webcastObject.repeatEnd ? 1 : 0,\n                    gift_type: webcastObject.giftDetails?.giftType\n                };\n\n                if (webcastObject.giftDetails) {\n                    Object.assign(webcastObject, webcastObject.giftDetails);\n                    delete webcastObject.giftDetails;\n                }\n\n                if (webcastObject.giftDetails.giftImage) {\n                    Object.assign(webcastObject, webcastObject.giftDetails.giftImage);\n                    delete webcastObject.giftDetails.giftImage;\n                }\n\n                if (webcastObject.giftExtra) {\n\n                    if (webcastObject.giftExtra.toUserId) {\n                        webcastObject.receiverUserId = webcastObject.giftExtra.toUserId;\n                        delete webcastObject.giftExtra.toUserId;\n                    }\n\n                    if (webcastObject.giftExtra.sendGiftSendMessageSuccessMs) {\n                        webcastObject.timestamp = parseInt(webcastObject.giftExtra.sendGiftSendMessageSuccessMs);\n                        delete webcastObject.giftExtra.sendGiftSendMessageSuccessMs;\n                    }\n\n                    Object.assign(webcastObject, webcastObject.giftExtra);\n                    delete webcastObject.giftExtra;\n                }\n\n                if (webcastObject.monitorExtra?.indexOf('{') === 0) {\n                    try {\n                        webcastObject.monitorExtra = JSON.parse(webcastObject.monitorExtra);\n                    } catch (err) {\n                    }\n                }\n\n                return webcastObject;\n            });\n            break;\n        }\n        case 'WebcastChatMessage': {\n            originalObject = simplify<WebcastChatMessage & { emotes: WebcastSubEmote & any }>((webcastObject) => {\n                webcastObject.emotes = webcastObject.emotes.map((emote: WebcastSubEmote) => (\n                    {\n                        emoteId: emote.emote.emoteId,\n                        emoteImageUrl: emote.emote.image.imageUrl,\n                        placeInComment: emote.placeInComment\n                    }\n                ));\n                return webcastObject;\n            });\n            break;\n        }\n        case 'WebcastEmoteChatMessage': {\n            originalObject = simplify<WebcastEmoteChatMessage & { emotes: WebcastSubEmote & any }>((webcastObject) => {\n                webcastObject.emotes = webcastObject.emoteList.map((emote: Emote) => (\n                    {\n                        emoteId: emote.emoteId,\n                        emoteImageUrl: emote.image.url[0]\n                    }\n                ));\n                return webcastObject;\n            });\n            break;\n        }\n\n    }\n\n    return originalObject;\n}\n\nfunction getUserAttributes(webcastUser: Partial<User>): Record<string, any> {\n    webcastUser ||= {};\n\n    const userAttributes: Record<string, any> = {\n        userId: webcastUser.userId?.toString(),\n        secUid: webcastUser.secUid?.toString(),\n        uniqueId: webcastUser.uniqueId !== '' ? webcastUser.uniqueId : undefined,\n        nickname: webcastUser.nickname !== '' ? webcastUser.nickname : undefined,\n        profilePictureUrl: getPreferredPictureFormat(webcastUser.profilePicture?.url),\n        followRole: webcastUser.followInfo?.followStatus,\n        userBadges: mapBadges(webcastUser.badges), // todo fix struct\n        userSceneTypes: webcastUser.badges?.map((x) => x?.badgeScene || 0),\n        userDetails: {\n            createTime: webcastUser.createTime?.toString(),\n            bioDescription: webcastUser.bioDescription,\n            profilePictureUrls: webcastUser.profilePicture?.url\n        }\n    };\n\n    if (webcastUser.followInfo) {\n        userAttributes.followInfo = {\n            followingCount: webcastUser.followInfo.followingCount,\n            followerCount: webcastUser.followInfo.followerCount,\n            followStatus: webcastUser.followInfo.followStatus,\n            pushStatus: webcastUser.followInfo.pushStatus\n        };\n    }\n\n    userAttributes.isModerator = userAttributes.userBadges.some((x) => (x.type && x.type.toLowerCase().includes('moderator')) || x.badgeSceneType === 1);\n    userAttributes.isNewGifter = userAttributes.userBadges.some((x) => x.type && x.type.toLowerCase().includes('live_ng_'));\n    userAttributes.isSubscriber = userAttributes.userBadges.some((x) => (x.url && x.url.toLowerCase().includes('/sub_')) || x.badgeSceneType === 4 || x.badgeSceneType === 7);\n    userAttributes.topGifterRank =\n        userAttributes.userBadges\n            .find((x) => x.url && x.url.includes('/ranklist_top_gifter_'))\n            ?.url.match(/(?<=ranklist_top_gifter_)(\\d+)(?=.png)/g)\n            ?.map(Number)[0] ?? null;\n\n    userAttributes.gifterLevel = userAttributes.userBadges.find((x) => x.badgeSceneType === 8)?.level || 0; // BadgeSceneType_UserGrade\n    userAttributes.teamMemberLevel = userAttributes.userBadges.find((x) => x.badgeSceneType === 10)?.level || 0; // BadgeSceneType_Fans\n\n    return userAttributes;\n}\n\nexport function getEventAttributes(event) {\n    if (event.msgId) event.msgId = event.msgId.toString();\n    if (event.createTime) event.createTime = event.createTime.toString();\n    return event;\n}\n\nexport function getTopViewerAttributes(topViewers) {\n    return topViewers.map((viewer) => {\n        return {\n            user: viewer.user ? getUserAttributes(viewer.user) : null,\n            coinCount: viewer.coinCount ? parseInt(viewer.coinCount) : 0\n        };\n    });\n}\n\nexport function mapBadges(badges) {\n    let simplifiedBadges = [];\n\n    if (Array.isArray(badges)) {\n        badges.forEach((innerBadges) => {\n            let badgeSceneType = innerBadges.badgeSceneType;\n\n            if (Array.isArray(innerBadges.badges)) {\n                innerBadges.badges.forEach((badge) => {\n                    simplifiedBadges.push(Object.assign({ badgeSceneType }, badge));\n                });\n            }\n\n            if (Array.isArray(innerBadges.imageBadges)) {\n                innerBadges.imageBadges.forEach((badge) => {\n                    if (badge && badge.image && badge.image.url) {\n                        simplifiedBadges.push({\n                            type: 'image',\n                            badgeSceneType,\n                            displayType: badge.displayType,\n                            url: badge.image.url\n                        });\n                    }\n                });\n            }\n\n            if (innerBadges.privilegeLogExtra?.level && innerBadges.privilegeLogExtra?.level !== '0') {\n                simplifiedBadges.push({\n                    type: 'privilege',\n                    privilegeId: innerBadges.privilegeLogExtra.privilegeId,\n                    level: parseInt(innerBadges.privilegeLogExtra.level),\n                    badgeSceneType: innerBadges.badgeSceneType\n                });\n            }\n        });\n    }\n\n    return simplifiedBadges;\n}\n\nexport function getPreferredPictureFormat(pictureUrls) {\n    if (!pictureUrls || !Array.isArray(pictureUrls) || !pictureUrls.length) {\n        return null;\n    }\n\n    return (\n        pictureUrls.find((x) => x.includes('100x100') && x.includes('.webp')) ||\n        pictureUrls.find((x) => x.includes('100x100') && x.includes('.jpeg')) ||\n        pictureUrls.find((x) => !x.includes('shrink')) ||\n        pictureUrls[0]\n    );\n}\n\n"]}